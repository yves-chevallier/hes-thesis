%!PS-Adobe-3.0 EPSF-3.0
%%Title: (hes-so.eps)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 16:33:07 11/17/05
%%For: (Canard)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 69 30
%%HiResBoundingBox: 0.0 0.0 68.603 29.604
%%Pages: 0
%%DocumentProcessColors:
%%DocumentCustomColors:
%%+ (PANTONE Warm Gray 7 CVU)
%%+ (PANTONE 3015 CVU)
%%RGBCustomColor:
%%+  0.67451 0.639216 0.603922 (PANTONE Warm Gray 7 CVU)
%%+  0.0 0.486275 0.717647 (PANTONE 3015 CVU)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 17440 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-701">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2005-11-17T16:33:07+01:00</xap:CreateDate>
         <xap:ModifyDate>2005-11-17T16:33:07+01:00</xap:ModifyDate>
         <xap:MetadataDate>2005-11-17T16:33:07+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>112</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAcAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AiTAhiD1Boc7p8yaxS+18&#xA;4V9Mdir5+/5yJiYea9Ol/ZewVB81mkJ/4lnR9jn92R/S/QHkPaCJ8aJ/o/pLynNu6J9D/wDOPH/K&#xA;FXv/AG0pf+TEGc32x/ej+r+kvX+z/wDcH+ufuD1DNS712KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV8X38QhvriIGojldK+PFiM7iJsAvms48JI7lDJMX2vnCvpjsV&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:354074737F57DA119FAAB5983D31A698</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:354074737F57DA119FAAB5983D31A698</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:93c18201-58e2-444f-a1a7-571a1eccb241</stRef:instanceID>
            <stRef:documentID>uuid:D3A30C37B055DA11BB74FBA5A16CA189</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">hes-so.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Canard</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 68.603 29.604 rectclip
/N10 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

/N22 <~s8W-!s8W&rrVc]nr;?Kjr;-?hqYL'aqYL$aq=sd\p\FUYq"OLWp\+CVp%S1Pp\+7R
p@S(OoChkKp%7hJo^_\Io(;PCo^hSDna?#=mdou:oC22>nF#o;mdfi6o'br8md'E2
lgaE/nEoN1mHX3.lL4-*n*TE.m-*m'kO.[!mcs!'lK@R!k3_EqmHNd"kiM0pjQu*k
lf[?pkN(pkj6GgflK@3mk2P[gip#O^l/^dejP]7^hrs+Xki:R`inrqYhr`qTk2P4Z
in`_Tgu[MMjl,"Ui7m>NgZ75FjPJVOhV.#Gg#LoAin`8Hh:U`Cf\tW;iS<&Dgt1K=
fAPE7i7c`>g=>-8e_f*2hq?N:g!nm2e)&a+h:L*2f@&L,dbNF$gt'm-f$W7'dG*7"
gXX[*e^*"#ce?mog=+@#e'6Rpc.URjf[A$sd`pFmbh(7cf?qdmd)sqdb1=q^f$DLi
ccXeaajn_Ye^)=dc,\>Ya4/ASe',k]bfA/U`mW)Nd`f\YbJhoQ`R2iHdE9DTb/DZK
_pHNCd)j2OaMQ9E_9U*;cH!cHa2-$?^s0m7c,RQC`P9[:^Wa[2bf.<?`P0O6^!"@-
b/:p8_nF40]ZJ%&ahk[3_Rmn*]#__!aM>C.^q.V&]#VRra1o.)^UV:u\Al:n`P/h#
^:2(q\&>qf`4WOr]X>Yi[DTYb_n3:n]<oJf[)0D\_Rd(i\['&^ZGF)W^q$_c\Zrr\
Z+mcP^ULG][]dERYJ7NL^:(2Y[][<OXhD-E]sXuT[&q!JXh;$C]<eQMZ`C[CX1GU;
]!A?IZ)P=>WOf@6\Zi'DYc,(8W49%0\?Dj?YG\k5Vm`b*[]ZL9Y,8V/V7!G%[B6:5
XJE8*UpR1t[&]t/X/!#$U9gkoZDjP'WM-VsTs:SiZ)OD$WM$MpTWtGgYc"+tVk1,j
T!,#_YGRnpVOjreSZ\f[Xe_JhUn"Q_S?/NUXJD>eURJ9ZRK~> 15 dict begin
/Sample exch def
currentdict end
[exch {begin
/_x0 exch def
/_tmp0 _x0
dup 1.0 ge {pop 254.0}
{dup 0.0 le {pop 0.0}
{254.0 mul 
} ifelse
} ifelse
def
/min0 _tmp0 cvi def
/max0 _tmp0 ceiling cvi def
/f0
min0 max0 eq
{{min0 f1}}
{{
[min0 f1 max0 f1
0 1 2 {dup 3 index exch get exch 2 index exch get
_tmp0 min0 max0 5 3 roll int
3 1 roll} for pop pop]
}} ifelse
def
/f1
{/prm0 exch def [
 0 254 prm0 limit 24 mul 3 {dup
-3 bitshift Sample exch get exch 8 add} repeat pop
]} def
/rnd {256 mul 0.5 add floor 256 div} def
save f0 aload pop 4 -1 roll restore
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
end
} bind aload pop] cvx readonly
/Function defineRes pop

/N23 <~s8W,trr;lps7lHgp\Fa[q>Bm[r:B[[o(MtLo_IqIq<dbKm.0u<o(_J=pZV,@kO/'+
me5c1p>kW7ip66qlLa$"o\\s+hWXUekO[Hko@i?ug#hkXjmq$ao$udjeDp)JipbCT
nBp4acf"9;hs\hIn''YVbMM[0h<rA>mDmuKa4p"#g[2u6m)7TD_V"1jf^$?)lbD';
^=MV_e`sftlFYR1]%#uTe*4?jl*f"'[F+3FdHIp`kd&OtZ-ML8cK;=Uk,lnjXj#q/
biYqKjf-GbW642!alK>@jJBrXUrVMja5`o7j.XKQTZ6#``T!H,igdsGS&F9T_r7$#
i0_@=QbhUG^u1Kni0;%7P/#n;^Yb0fhN5G-O1jD0]\SOYh2Ao$MS%]$]A8:SgkWGp
L:Q&m\D)\HgOluiK!sBa[b?5>g4-N`I^RjW[+Tf4fm:!WH*Z(IZIjB,fQOOOFg0J>
Yh*s#f5e(HENdr3Y17EleSMA<CTQ'$XOV$deS)#5B<0NoWmkU[e7>Q.@]@gbW7#(P
dU/p#?Dl4WVUA_Hd9<Bo=f'MJV9rA?crQpg<27f=UX2o5cV^F_:nl92U!?B*c:jnV
9;'R%T[$*#bsn;L7@qalT$9Tnbs@oE5Ffn\SBF$bb<)3:3Le2NR`[OWau#R017?9>
RE@.Mat/q%/!n@+QcLM?a<[+n,*g1jQ,al0`u()^'U?]NPfF/q`WVLF!0bD&P/[Kb
`W2.?!0P5#Oi7<^`;l"=!0G,!O2M$Z_Z5b8!04qsNl(jV_>oS4!0+hqN5>RR_>oP3
!/nYnMnoCO_#TA/!/eSmMST:L^]95+!/SAiLq`qG^As&'!/J8gLV<bD^&Wo%!/A2f
KtRJ?]`<c"!//#cKY7A<]E!Ss!/%oaK=h29]E!Pr!.qf_J\(o5])[Do!.h`^J@Y`1
\c@5k!.VQ[J%5Q.\H%)g!.MEXI^fB+\,^re!.;6UI('*'[f~> 15 dict begin
/Sample exch def
currentdict end
[exch {begin
/_x0 exch def
/_tmp0 _x0
dup 1.0 ge {pop 254.0}
{dup 0.0 le {pop 0.0}
{254.0 mul 
} ifelse
} ifelse
def
/min0 _tmp0 cvi def
/max0 _tmp0 ceiling cvi def
/f0
min0 max0 eq
{{min0 f1}}
{{
[min0 f1 max0 f1
0 1 2 {dup 3 index exch get exch 2 index exch get
_tmp0 min0 max0 5 3 roll int
3 1 roll} for pop pop]
}} ifelse
def
/f1
{/prm0 exch def [
 0 254 prm0 limit 24 mul 3 {dup
-3 bitshift Sample exch get exch 8 add} repeat pop
]} def
/rnd {256 mul 0.5 add floor 256 div} def
save f0 aload pop 4 -1 roll restore
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
end
} bind aload pop] cvx readonly
/Function defineRes pop

q
0.0 0.0 m
68.603 0.0 l
68.603 29.604 l
0.0 29.604 l
h
W
n
q
n
11.43 5.9111 m
11.155 5.9111 11.135 5.9111 10.844 5.8965 c
10.813 5.9302 l
10.829 6.4775 10.844 7.0689 10.839 7.5723 c
10.719 7.5723 10.59 7.5772 10.351 7.5772 c
9.9463 7.5772 9.5 7.5723 9.1426 7.5674 c
9.1372 6.6387 9.1528 6.3115 9.1782 5.9448 c
9.1528 5.9111 l
8.8672 5.9111 8.852 5.9111 8.5664 5.8965 c
8.5356 5.9302 l
8.5561 6.4092 8.561 6.6587 8.561 8.1392 c
8.561 8.7988 8.5454 9.0337 8.5303 9.3272 c
8.561 9.3608 l
8.8262 9.3662 8.8882 9.3662 9.1372 9.3755 c
9.1631 9.3418 l
9.1577 9.0527 9.1479 8.6524 9.1479 7.9829 c
9.4175 7.9775 9.5625 7.9732 9.8999 7.9732 c
10.377 7.9732 10.595 7.9775 10.839 7.9883 c
10.829 8.9165 10.829 9.0234 10.802 9.3272 c
10.829 9.3608 l
11.108 9.3662 11.15 9.3662 11.404 9.3755 c
11.43 9.3418 l
11.415 8.8672 11.41 8.5596 11.41 7.7046 c
11.41 6.7559 11.43 6.3945 11.461 5.9448 c
11.43 5.9111 l
[/Separation (PANTONE Warm Gray 7 CVU) /N10 /ColorSpace findRes /N22 /Function findRes ] cs 1.0 sc
f
n
14.403 7.4014 m
14.403 7.6065 14.403 7.875 14.367 8.0122 c
14.258 8.3936 13.884 8.5156 13.5 8.5156 c
13.194 8.5156 12.893 8.4522 12.602 8.3545 c
12.572 8.3252 l
12.567 8.2227 12.567 8.1934 12.556 7.9683 c
12.597 7.9443 l
12.816 8.0322 13.049 8.1294 13.386 8.1294 c
13.645 8.1294 13.765 8.0361 13.817 7.9482 c
13.864 7.8701 13.864 7.7778 13.864 7.6455 c
13.775 7.6357 l
12.841 7.5332 12.26 7.3232 12.26 6.668 c
12.26 6.1846 12.623 5.8525 13.142 5.8525 c
13.537 5.8525 13.77 6.0283 13.869 6.1016 c
13.864 5.9258 l
13.884 5.8965 l
14.123 5.9058 14.165 5.9111 14.408 5.915 c
14.434 5.9404 l
14.408 6.2578 14.403 6.3115 14.403 6.917 c
14.403 7.4014 l
h
13.869 7.2837 m
13.869 6.4678 l
13.812 6.419 13.625 6.2529 13.303 6.2529 c
12.81 6.2529 12.81 6.6729 12.81 6.6973 c
12.81 7.1328 13.298 7.2007 13.822 7.2744 c
13.869 7.2837 l
f
n
17.651 8.437 m
17.641 8.0659 17.635 7.7192 17.635 7.3232 c
17.635 6.7222 17.651 6.3604 17.662 6.1504 c
17.662 6.0816 17.666 6.0137 17.671 5.9448 c
17.651 5.915 l
17.402 5.9111 17.36 5.9058 17.122 5.8965 c
17.09 5.9258 l
17.096 6.1309 l
16.982 6.0527 16.706 5.8525 16.281 5.8525 c
16.079 5.8525 15.856 5.8965 15.69 6.0186 c
15.358 6.2725 15.358 6.688 15.352 7.0689 c
15.352 7.3721 l
15.342 8.0708 15.342 8.1494 15.327 8.4131 c
15.352 8.4473 l
15.596 8.4522 15.643 8.4522 15.887 8.4717 c
15.918 8.437 l
15.897 7.3672 l
15.897 7.2354 15.892 7.1372 15.897 6.9028 c
15.902 6.6973 15.913 6.2578 16.437 6.2578 c
16.743 6.2578 16.961 6.419 17.085 6.5117 c
17.09 6.7759 17.09 7.001 17.09 7.2837 c
17.09 7.9634 17.085 8.1001 17.054 8.418 c
17.085 8.4522 l
17.324 8.457 17.381 8.457 17.62 8.4717 c
17.651 8.437 l
f
n
19.804 6.2969 m
19.789 6.1357 19.789 6.1016 19.783 5.9595 c
19.757 5.9302 l
19.648 5.9058 19.56 5.8862 19.368 5.8862 c
19.244 5.8862 18.917 5.8862 18.756 6.1401 c
18.663 6.2822 18.663 6.3994 18.663 6.9756 c
18.673 8.0508 l
18.491 8.0508 18.486 8.0469 18.299 8.0415 c
18.279 8.0708 l
18.289 8.2271 18.289 8.2666 18.289 8.4229 c
18.32 8.4522 l
18.434 8.4522 18.501 8.4473 18.673 8.4522 c
18.667 8.5547 18.667 8.6621 18.667 8.7647 c
18.663 8.8579 18.658 8.9502 18.652 9.0435 c
18.678 9.0776 l
18.912 9.1314 18.969 9.146 19.208 9.2139 c
19.244 9.1899 l
19.228 8.8672 19.223 8.8037 19.223 8.4473 c
19.441 8.4522 19.502 8.4522 19.798 8.4619 c
19.825 8.4326 l
19.814 8.3057 19.809 8.252 19.809 8.0855 c
19.783 8.0562 l
19.524 8.0615 19.493 8.0659 19.218 8.0659 c
19.208 7.1567 l
19.212 7.0982 19.212 6.8198 19.212 6.751 c
19.212 6.3945 19.259 6.2822 19.519 6.2822 c
19.627 6.2822 19.71 6.3066 19.768 6.3262 c
19.804 6.2969 l
f
n
22.584 6.5313 m
22.517 6.4775 22.403 6.3897 22.211 6.3164 c
22.066 6.2676 21.91 6.2432 21.76 6.2432 c
21.599 6.2432 21.303 6.2676 21.09 6.5068 c
20.914 6.707 20.899 6.9468 20.894 7.1182 c
21.744 7.1226 21.884 7.1226 22.694 7.1182 c
22.73 7.1475 l
22.735 7.3623 22.746 7.8457 22.45 8.1787 c
22.294 8.3545 22.009 8.5156 21.599 8.5156 c
20.919 8.5156 20.338 8.0708 20.338 7.1621 c
20.338 6.3115 20.873 5.8525 21.723 5.8525 c
22.185 5.8525 22.465 5.9937 22.554 6.0376 c
22.584 6.0723 l
22.595 6.2627 22.6 6.3115 22.626 6.5068 c
22.584 6.5313 l
h
22.196 7.4941 m
21.718 7.4893 21.521 7.4844 20.894 7.4893 c
20.946 7.9775 21.288 8.1641 21.579 8.1641 c
21.811 8.1641 22.04 8.0508 22.144 7.7827 c
22.185 7.6699 22.19 7.5625 22.196 7.4941 c
f
n
27.534 6.3115 m
27.518 6.1455 27.518 6.1113 27.508 5.9448 c
27.472 5.9111 l
26.46 5.9111 26.299 5.9058 25.314 5.8965 c
25.288 5.9302 l
25.303 6.3164 25.319 6.5801 25.319 7.4746 c
25.319 8.2959 25.319 8.7647 25.282 9.3272 c
25.314 9.3608 l
26.335 9.3662 26.538 9.3662 27.493 9.3755 c
27.524 9.3418 l
27.508 9.1948 27.498 9.1362 27.488 8.9605 c
27.456 8.9263 l
26.787 8.9453 26.564 8.9453 25.905 8.9502 c
25.889 8.501 25.889 8.3589 25.889 7.9097 c
26.528 7.9043 26.725 7.9097 27.358 7.919 c
27.383 7.8857 l
27.363 7.7139 27.363 7.665 27.358 7.5088 c
27.327 7.4746 l
26.725 7.4893 26.595 7.4893 25.889 7.4893 c
25.879 6.9224 25.884 6.7852 25.889 6.3213 c
26.673 6.3213 26.833 6.3213 27.503 6.3457 c
27.534 6.3115 l
f
n
30.263 6.4922 m
30.242 6.2822 30.237 6.2578 30.222 6.0576 c
30.185 6.023 l
30.035 5.9551 29.832 5.8565 29.469 5.8565 c
28.686 5.8565 28.177 6.3897 28.177 7.1524 c
28.177 7.9287 28.675 8.5156 29.48 8.5156 c
29.817 8.5156 30.055 8.4131 30.19 8.3589 c
30.211 8.3252 l
30.19 8.1494 30.185 8.0855 30.175 7.939 c
30.133 7.919 l
29.962 8.0361 29.765 8.1094 29.557 8.1094 c
29.126 8.1094 28.748 7.7974 28.748 7.1719 c
28.748 6.5068 29.148 6.2676 29.552 6.2676 c
29.905 6.2676 30.123 6.4385 30.222 6.5117 c
30.263 6.4922 l
f
n
33.355 7.2207 m
33.345 7.5625 33.277 7.9043 33.039 8.1641 c
32.811 8.4082 32.462 8.5156 32.11 8.5156 c
31.591 8.5156 31.29 8.3154 31.145 8.1733 c
30.797 7.8457 30.787 7.3672 30.787 7.1812 c
30.787 7.02 30.792 6.5215 31.145 6.1846 c
31.311 6.023 31.607 5.8565 32.074 5.8565 c
32.437 5.8565 32.743 5.9404 32.971 6.1553 c
33.143 6.3164 33.251 6.5068 33.308 6.7466 c
33.345 6.8931 33.355 7.0542 33.355 7.2207 c
h
32.79 7.2007 m
32.795 7.0982 32.79 6.7705 32.67 6.5508 c
32.52 6.2822 32.271 6.2236 32.079 6.2236 c
31.975 6.2236 31.866 6.2432 31.773 6.2871 c
31.363 6.4829 31.358 6.9756 31.358 7.1719 c
31.358 7.377 31.373 7.6607 31.513 7.8604 c
31.695 8.1348 31.985 8.1441 32.084 8.1441 c
32.375 8.1441 32.541 8.0171 32.639 7.8657 c
32.769 7.6504 32.79 7.3232 32.79 7.2007 c
f
n
34.74 5.915 m
34.491 5.9111 34.439 5.9058 34.195 5.8965 c
34.169 5.9302 l
34.18 6.2774 34.195 6.7173 34.195 7.6553 c
34.195 8.3301 34.195 9.0527 34.144 9.6787 c
34.169 9.708 l
34.424 9.7471 34.476 9.7568 34.735 9.8106 c
34.766 9.7764 l
34.73 9.1362 34.73 8.4912 34.73 7.8511 c
34.73 6.7808 34.745 6.4092 34.771 5.9448 c
34.74 5.915 l
f
n
37.822 6.5313 m
37.754 6.4775 37.64 6.3897 37.449 6.3164 c
37.303 6.2676 37.147 6.2432 36.998 6.2432 c
36.836 6.2432 36.541 6.2676 36.328 6.5068 c
36.151 6.707 36.136 6.9468 36.131 7.1182 c
36.981 7.1226 37.122 7.1226 37.931 7.1182 c
37.967 7.1475 l
37.973 7.3623 37.982 7.8457 37.687 8.1787 c
37.531 8.3545 37.246 8.5156 36.836 8.5156 c
36.157 8.5156 35.576 8.0708 35.576 7.1621 c
35.576 6.3115 36.11 5.8525 36.96 5.8525 c
37.423 5.8525 37.703 5.9937 37.791 6.0376 c
37.822 6.0723 l
37.832 6.2627 37.838 6.3115 37.863 6.5068 c
37.822 6.5313 l
h
37.433 7.4941 m
36.956 7.4893 36.758 7.4844 36.131 7.4893 c
36.182 7.9775 36.525 8.1641 36.816 8.1641 c
37.048 8.1641 37.277 8.0508 37.381 7.7827 c
37.423 7.6699 37.428 7.5625 37.433 7.4941 c
f
n
41.864 7.8657 m
42.242 7.709 42.746 7.5039 42.746 6.8784 c
42.746 6.3311 42.315 5.8379 41.412 5.8379 c
40.862 5.8379 40.509 5.9937 40.385 6.0527 c
40.364 6.0869 l
40.385 6.2578 40.39 6.3506 40.405 6.5361 c
40.457 6.5557 l
40.587 6.4727 40.888 6.2676 41.371 6.2676 c
41.905 6.2676 42.128 6.5264 42.128 6.8198 c
42.128 7.1621 41.827 7.294 41.49 7.416 c
41.231 7.5234 l
40.862 7.6846 40.37 7.895 40.37 8.4912 c
40.37 8.6719 40.421 8.8579 40.53 9.0049 c
40.769 9.3272 41.199 9.4346 41.62 9.4346 c
42.03 9.4346 42.278 9.3608 42.553 9.2778 c
42.58 9.2393 l
42.559 9.0527 42.553 8.9849 42.538 8.8086 c
42.497 8.7891 l
42.274 8.897 42.03 9.0142 41.641 9.0142 c
41.21 9.0142 40.94 8.8237 40.94 8.5352 c
40.94 8.3154 41.096 8.2129 41.205 8.1494 c
41.272 8.1094 41.292 8.1001 41.604 7.9732 c
41.864 7.8657 l
f
n
44.115 8.457 m
44.079 8.4863 l
43.845 8.4424 43.788 8.4277 43.534 8.3887 c
43.508 8.3589 l
43.571 7.8018 43.571 7.46 43.575 6.7026 c
43.575 6.4141 43.581 6.126 43.581 5.8379 c
43.581 5.3389 43.571 5.0313 43.56 4.7334 c
43.586 4.7041 l
43.767 4.7085 43.95 4.7134 44.13 4.7188 c
44.162 4.7481 l
44.136 5.207 44.125 5.334 44.121 5.9204 c
44.193 5.915 44.255 5.9111 44.354 5.9111 c
45.448 5.9111 45.983 6.5606 45.983 7.3179 c
45.983 8.0068 45.521 8.5156 44.862 8.5156 c
44.457 8.5156 44.208 8.3301 44.105 8.252 c
44.115 8.457 l
h
44.115 6.2871 m
44.11 6.5703 44.105 6.8584 44.105 7.1475 c
44.105 7.3965 44.11 7.6455 44.115 7.8999 c
44.234 7.9775 44.432 8.1055 44.712 8.1055 c
45.127 8.1055 45.412 7.792 45.412 7.2837 c
45.412 6.6826 45.018 6.2725 44.333 6.2725 c
44.245 6.2725 44.182 6.2822 44.115 6.2871 c
f
n
48.919 6.5313 m
48.852 6.4775 48.738 6.3897 48.545 6.3164 c
48.4 6.2676 48.245 6.2432 48.094 6.2432 c
47.934 6.2432 47.638 6.2676 47.425 6.5068 c
47.248 6.707 47.233 6.9468 47.228 7.1182 c
48.079 7.1226 48.219 7.1226 49.028 7.1182 c
49.065 7.1475 l
49.069 7.3623 49.08 7.8457 48.784 8.1787 c
48.629 8.3545 48.344 8.5156 47.934 8.5156 c
47.254 8.5156 46.672 8.0708 46.672 7.1621 c
46.672 6.3115 47.207 5.8525 48.058 5.8525 c
48.52 5.8525 48.8 5.9937 48.888 6.0376 c
48.919 6.0723 l
48.93 6.2627 48.935 6.3115 48.96 6.5068 c
48.919 6.5313 l
h
48.504 9.5371 m
48.406 9.5322 48.307 9.5322 48.208 9.5322 c
48.11 9.5322 48.017 9.5322 47.902 9.5371 c
47.871 9.5122 l
47.757 9.1948 47.606 8.8823 47.554 8.7647 c
47.576 8.7305 l
47.757 8.7305 47.814 8.7305 47.955 8.7256 c
47.99 8.7451 l
48.224 9.1021 48.271 9.1699 48.525 9.4976 c
48.504 9.5371 l
h
48.53 7.4941 m
48.053 7.4893 47.856 7.4844 47.228 7.4893 c
47.28 7.9775 47.623 8.1641 47.913 8.1641 c
48.146 8.1641 48.374 8.0508 48.478 7.7827 c
48.52 7.6699 48.525 7.5625 48.53 7.4941 c
f
n
51.804 6.4922 m
51.783 6.2822 51.778 6.2578 51.762 6.0576 c
51.726 6.023 l
51.576 5.9551 51.373 5.8565 51.01 5.8565 c
50.227 5.8565 49.718 6.3897 49.718 7.1524 c
49.718 7.9287 50.217 8.5156 51.02 8.5156 c
51.358 8.5156 51.596 8.4131 51.731 8.3589 c
51.752 8.3252 l
51.731 8.1494 51.726 8.0855 51.716 7.939 c
51.674 7.919 l
51.503 8.0361 51.306 8.1094 51.099 8.1094 c
50.668 8.1094 50.29 7.7974 50.29 7.1719 c
50.29 6.5068 50.688 6.2676 51.093 6.2676 c
51.446 6.2676 51.664 6.4385 51.762 6.5117 c
51.804 6.4922 l
f
n
53.039 9.166 m
52.774 9.1553 52.716 9.1514 52.463 9.126 c
52.432 9.1553 l
52.437 9.2192 52.437 9.2876 52.437 9.3511 c
52.437 9.439 52.432 9.5176 52.426 9.6152 c
52.463 9.6445 l
52.733 9.6641 52.78 9.669 53.039 9.6934 c
53.07 9.6641 l
53.064 9.4634 53.064 9.415 53.07 9.1997 c
53.039 9.166 l
h
53.033 5.915 m
52.763 5.9111 52.722 5.9111 52.468 5.8965 c
52.442 5.9302 l
52.457 6.1895 52.473 6.4141 52.473 6.9566 c
52.473 7.8897 52.457 8.0659 52.421 8.3545 c
52.447 8.3887 l
52.67 8.4229 52.748 8.4326 53.007 8.4863 c
53.059 8.457 l
53.044 8.2026 53.028 7.939 53.028 7.3086 c
53.028 6.3994 53.039 6.2774 53.059 5.9448 c
53.033 5.915 l
f
n
55.975 7.4014 m
55.975 7.6065 55.975 7.875 55.938 8.0122 c
55.83 8.3936 55.456 8.5156 55.072 8.5156 c
54.766 8.5156 54.465 8.4522 54.175 8.3545 c
54.144 8.3252 l
54.138 8.2227 54.138 8.1934 54.128 7.9683 c
54.169 7.9443 l
54.388 8.0322 54.621 8.1294 54.958 8.1294 c
55.218 8.1294 55.337 8.0361 55.389 7.9482 c
55.435 7.8701 55.435 7.7778 55.435 7.6455 c
55.347 7.6357 l
54.414 7.5332 53.832 7.3232 53.832 6.668 c
53.832 6.1846 54.196 5.8525 54.714 5.8525 c
55.109 5.8525 55.342 6.0283 55.441 6.1016 c
55.435 5.9258 l
55.456 5.8965 l
55.695 5.9058 55.737 5.9111 55.98 5.915 c
56.006 5.9404 l
55.98 6.2578 55.975 6.3115 55.975 6.917 c
55.975 7.4014 l
h
55.441 7.2837 m
55.441 6.4678 l
55.383 6.419 55.197 6.2529 54.875 6.2529 c
54.382 6.2529 54.382 6.6729 54.382 6.6973 c
54.382 7.1328 54.87 7.2007 55.394 7.2744 c
55.441 7.2837 l
f
n
57.491 5.915 m
57.241 5.9111 57.189 5.9058 56.945 5.8965 c
56.919 5.9302 l
56.93 6.2774 56.945 6.7173 56.945 7.6553 c
56.945 8.3301 56.945 9.0527 56.893 9.6787 c
56.919 9.708 l
57.174 9.7471 57.226 9.7568 57.485 9.8106 c
57.516 9.7764 l
57.479 9.1362 57.479 8.4912 57.479 7.8511 c
57.479 6.7808 57.495 6.4092 57.521 5.9448 c
57.491 5.915 l
f
n
59.036 9.166 m
58.771 9.1553 58.715 9.1514 58.46 9.126 c
58.429 9.1553 l
58.434 9.2192 58.434 9.2876 58.434 9.3511 c
58.434 9.439 58.429 9.5176 58.424 9.6152 c
58.46 9.6445 l
58.73 9.6641 58.777 9.669 59.036 9.6934 c
59.067 9.6641 l
59.062 9.4634 59.062 9.415 59.067 9.1997 c
59.036 9.166 l
h
59.031 5.915 m
58.761 5.9111 58.719 5.9111 58.465 5.8965 c
58.44 5.9302 l
58.455 6.1895 58.471 6.4141 58.471 6.9566 c
58.471 7.8897 58.455 8.0659 58.419 8.3545 c
58.445 8.3887 l
58.667 8.4229 58.746 8.4326 59.005 8.4863 c
59.057 8.457 l
59.041 8.2026 59.026 7.939 59.026 7.3086 c
59.026 6.3994 59.036 6.2774 59.057 5.9448 c
59.031 5.915 l
f
n
61.085 7.3965 m
61.293 7.333 61.765 7.1812 61.765 6.6636 c
61.765 6.4678 61.687 6.2481 61.475 6.0869 c
61.2 5.8672 60.831 5.8525 60.644 5.8525 c
60.365 5.8525 60.131 5.9009 59.934 5.9746 c
59.908 5.9844 59.882 5.9937 59.856 6.0034 c
59.83 6.0474 l
59.85 6.2383 59.85 6.2627 59.861 6.458 c
59.914 6.4727 l
60.006 6.4043 60.234 6.2383 60.634 6.2383 c
61.044 6.2383 61.194 6.4531 61.194 6.6045 c
61.194 6.8291 60.972 6.9028 60.655 7.001 c
60.489 7.0542 l
60.276 7.1182 59.809 7.2593 59.809 7.7632 c
59.809 8.2666 60.276 8.5156 60.857 8.5156 c
61.241 8.5156 61.511 8.4131 61.604 8.3784 c
61.63 8.3442 l
61.61 8.1641 61.604 8.1441 61.589 7.9585 c
61.542 7.939 l
61.412 8.0171 61.21 8.1348 60.873 8.1348 c
60.8 8.1348 60.728 8.1294 60.649 8.1094 c
60.494 8.0708 60.365 7.9683 60.365 7.8164 c
60.365 7.6065 60.577 7.543 60.899 7.4502 c
61.085 7.3965 l
f
n
64.603 6.5313 m
64.536 6.4775 64.421 6.3897 64.229 6.3164 c
64.084 6.2676 63.928 6.2432 63.778 6.2432 c
63.617 6.2432 63.322 6.2676 63.108 6.5068 c
62.932 6.707 62.916 6.9468 62.912 7.1182 c
63.762 7.1226 63.902 7.1226 64.712 7.1182 c
64.748 7.1475 l
64.753 7.3623 64.764 7.8457 64.468 8.1787 c
64.312 8.3545 64.027 8.5156 63.617 8.5156 c
62.938 8.5156 62.357 8.0708 62.357 7.1621 c
62.357 6.3115 62.891 5.8525 63.742 5.8525 c
64.204 5.8525 64.484 5.9937 64.572 6.0376 c
64.603 6.0723 l
64.613 6.2627 64.619 6.3115 64.645 6.5068 c
64.603 6.5313 l
h
64.188 9.5371 m
64.089 9.5322 63.991 9.5322 63.892 9.5322 c
63.793 9.5322 63.7 9.5322 63.586 9.5371 c
63.555 9.5122 l
63.441 9.1948 63.291 8.8823 63.239 8.7647 c
63.259 8.7305 l
63.441 8.7305 63.498 8.7305 63.638 8.7256 c
63.674 8.7451 l
63.908 9.1021 63.954 9.1699 64.209 9.4976 c
64.188 9.5371 l
h
64.213 7.4941 m
63.737 7.4893 63.54 7.4844 62.912 7.4893 c
62.964 7.9775 63.306 8.1641 63.596 8.1641 c
63.83 8.1641 64.058 8.0508 64.162 7.7827 c
64.204 7.6699 64.209 7.5625 64.213 7.4941 c
f
n
67.648 6.5313 m
67.581 6.4775 67.467 6.3897 67.275 6.3164 c
67.129 6.2676 66.974 6.2432 66.824 6.2432 c
66.663 6.2432 66.367 6.2676 66.154 6.5068 c
65.978 6.707 65.962 6.9468 65.957 7.1182 c
66.808 7.1226 66.948 7.1226 67.757 7.1182 c
67.794 7.1475 l
67.798 7.3623 67.81 7.8457 67.514 8.1787 c
67.358 8.3545 67.072 8.5156 66.663 8.5156 c
65.983 8.5156 65.402 8.0708 65.402 7.1621 c
65.402 6.3115 65.937 5.8525 66.787 5.8525 c
67.249 5.8525 67.529 5.9937 67.618 6.0376 c
67.648 6.0723 l
67.659 6.2627 67.664 6.3115 67.69 6.5068 c
67.648 6.5313 l
h
67.259 7.4941 m
66.782 7.4893 66.585 7.4844 65.957 7.4893 c
66.009 7.9775 66.351 8.1641 66.642 8.1641 c
66.876 8.1641 67.104 8.0508 67.207 7.7827 c
67.249 7.6699 67.254 7.5625 67.259 7.4941 c
f
n
15.674 3.8413 m
15.7 3.5581 15.726 3.2647 15.721 2.6592 c
15.581 2.6685 15.529 2.6685 15.42 2.6685 c
15.15 2.6685 14.657 2.6538 14.278 2.3316 c
14.061 2.1504 13.822 1.8135 13.822 1.2803 c
13.822 0.5381 14.299 0.024401 14.99 0.024401 c
15.368 0.024401 15.581 0.1812 15.705 0.2691 c
15.695 0.087902 l
15.731 0.058601 l
15.97 0.068901 16.032 0.073202 16.26 0.073202 c
16.287 0.1079 l
16.265 0.4448 16.245 0.8066 16.245 1.564 c
16.245 2.0527 16.25 3.2647 16.287 3.9439 c
16.25 3.9736 l
16.016 3.9248 15.965 3.915 15.7 3.8706 c
15.674 3.8413 l
h
15.7 0.6748 m
15.627 0.6162 15.435 0.4595 15.119 0.4595 c
14.849 0.4595 14.678 0.5772 14.584 0.6797 c
14.476 0.8018 14.393 1.002 14.393 1.2803 c
14.393 1.7158 14.58 1.9453 14.694 2.0479 c
14.943 2.2676 15.285 2.2774 15.446 2.2774 c
15.555 2.2774 15.617 2.2676 15.705 2.2632 c
15.71 1.4614 15.71 1.3149 15.7 0.6748 c
f
n
19.332 0.6943 m
19.264 0.6406 19.15 0.5527 18.958 0.4795 c
18.813 0.4302 18.658 0.4058 18.506 0.4058 c
18.346 0.4058 18.05 0.4302 17.838 0.6699 c
17.662 0.8701 17.645 1.1099 17.641 1.2803 c
18.491 1.2857 18.631 1.2857 19.441 1.2803 c
19.477 1.3096 l
19.482 1.5249 19.493 2.0088 19.197 2.3408 c
19.042 2.5166 18.756 2.6777 18.346 2.6777 c
17.666 2.6777 17.085 2.2334 17.085 1.3242 c
17.085 0.4741 17.62 0.014702 18.471 0.014702 c
18.932 0.014702 19.212 0.1563 19.3 0.2007 c
19.332 0.2344 l
19.342 0.4253 19.347 0.4741 19.373 0.6699 c
19.332 0.6943 l
h
18.943 1.6572 m
18.465 1.6524 18.268 1.647 17.641 1.6524 c
17.692 2.1406 18.035 2.3262 18.325 2.3262 c
18.559 2.3262 18.787 2.2139 18.891 1.9453 c
18.932 1.833 18.938 1.7251 18.943 1.6572 c
f
n
23.373 2.0283 m
23.752 1.8721 24.255 1.6665 24.255 1.041 c
24.255 0.4941 23.825 0.0 22.921 0.0 c
22.372 0.0 22.019 0.1563 21.895 0.2158 c
21.874 0.2495 l
21.895 0.4209 21.9 0.5132 21.915 0.6992 c
21.967 0.7188 l
22.097 0.6357 22.398 0.4302 22.88 0.4302 c
23.415 0.4302 23.638 0.689 23.638 0.9824 c
23.638 1.3242 23.337 1.4561 22.999 1.5786 c
22.74 1.6865 l
22.372 1.8477 21.879 2.0576 21.879 2.6538 c
21.879 2.835 21.931 3.0205 22.04 3.167 c
22.279 3.4893 22.709 3.5972 23.129 3.5972 c
23.539 3.5972 23.788 3.5239 24.063 3.4409 c
24.089 3.4014 l
24.069 3.2158 24.063 3.1475 24.048 2.9717 c
24.006 2.9522 l
23.783 3.0596 23.539 3.1768 23.15 3.1768 c
22.719 3.1768 22.45 2.9863 22.45 2.6978 c
22.45 2.478 22.605 2.3755 22.714 2.3115 c
22.782 2.2725 22.803 2.2632 23.114 2.1357 c
23.373 2.0283 l
f
n
27.352 2.6001 m
27.342 2.229 27.337 1.8818 27.337 1.4858 c
27.337 0.8848 27.352 0.5234 27.363 0.313 c
27.363 0.2446 27.368 0.1758 27.374 0.1079 c
27.352 0.078102 l
27.104 0.073202 27.062 0.068901 26.823 0.058601 c
26.792 0.087902 l
26.797 0.293 l
26.683 0.2158 26.408 0.014702 25.983 0.014702 c
25.781 0.014702 25.558 0.058601 25.391 0.1812 c
25.06 0.4356 25.06 0.8506 25.054 1.2315 c
25.054 1.5347 l
25.044 2.2334 25.044 2.3115 25.028 2.5752 c
25.054 2.6099 l
25.298 2.6152 25.344 2.6152 25.588 2.6338 c
25.62 2.6001 l
25.599 1.5298 l
25.599 1.3975 25.594 1.3003 25.599 1.0659 c
25.604 0.8604 25.615 0.4209 26.138 0.4209 c
26.445 0.4209 26.663 0.582 26.788 0.6748 c
26.792 0.9385 26.792 1.1631 26.792 1.4468 c
26.792 2.1265 26.788 2.2632 26.756 2.5806 c
26.788 2.6152 l
27.026 2.6191 27.083 2.6191 27.321 2.6338 c
27.352 2.6001 l
f
n
28.894 3.3281 m
28.628 3.3184 28.572 3.3135 28.317 3.2891 c
28.286 3.3184 l
28.292 3.3823 28.292 3.4507 28.292 3.5137 c
28.292 3.6021 28.286 3.6797 28.282 3.7783 c
28.317 3.8076 l
28.587 3.8267 28.634 3.8316 28.894 3.8555 c
28.924 3.8267 l
28.919 3.6265 28.919 3.5772 28.924 3.3628 c
28.894 3.3281 l
h
28.888 0.078102 m
28.619 0.073202 28.577 0.073202 28.323 0.058601 c
28.297 0.093302 l
28.312 0.3521 28.328 0.5772 28.328 1.1191 c
28.328 2.0527 28.312 2.229 28.276 2.5166 c
28.302 2.5513 l
28.525 2.5855 28.603 2.5952 28.862 2.6489 c
28.915 2.6191 l
28.898 2.3657 28.883 2.1016 28.883 1.4712 c
28.883 0.562 28.894 0.4395 28.915 0.1079 c
28.888 0.078102 l
f
n
30.943 1.5586 m
31.15 1.4961 31.623 1.3442 31.623 0.8262 c
31.623 0.6304 31.544 0.4107 31.332 0.2495 c
31.057 0.029303 30.688 0.014702 30.501 0.014702 c
30.222 0.014702 29.988 0.064001 29.791 0.1372 c
29.765 0.1465 29.739 0.1563 29.713 0.1665 c
29.687 0.2105 l
29.708 0.4009 29.708 0.4253 29.718 0.6206 c
29.77 0.6357 l
29.864 0.5674 30.092 0.4009 30.492 0.4009 c
30.901 0.4009 31.051 0.6162 31.051 0.7676 c
31.051 0.9922 30.829 1.0659 30.512 1.1631 c
30.346 1.2168 l
30.134 1.2803 29.666 1.4224 29.666 1.9258 c
29.666 2.4287 30.134 2.6777 30.714 2.6777 c
31.098 2.6777 31.368 2.5752 31.461 2.5415 c
31.487 2.5073 l
31.467 2.3262 31.461 2.3066 31.446 2.1211 c
31.399 2.1016 l
31.269 2.1797 31.068 2.2969 30.73 2.2969 c
30.658 2.2969 30.585 2.292 30.507 2.2725 c
30.351 2.2334 30.222 2.1309 30.222 1.9795 c
30.222 1.7695 30.434 1.7056 30.756 1.6133 c
30.943 1.5586 l
f
n
33.444 1.5586 m
33.651 1.4961 34.123 1.3442 34.123 0.8262 c
34.123 0.6304 34.045 0.4107 33.832 0.2495 c
33.558 0.029303 33.189 0.014702 33.002 0.014702 c
32.722 0.014702 32.489 0.064001 32.292 0.1372 c
32.266 0.1465 32.24 0.1563 32.214 0.1665 c
32.188 0.2105 l
32.208 0.4009 32.208 0.4253 32.219 0.6206 c
32.271 0.6357 l
32.365 0.5674 32.592 0.4009 32.992 0.4009 c
33.401 0.4009 33.552 0.6162 33.552 0.7676 c
33.552 0.9922 33.329 1.0659 33.013 1.1631 c
32.847 1.2168 l
32.634 1.2803 32.167 1.4224 32.167 1.9258 c
32.167 2.4287 32.634 2.6777 33.215 2.6777 c
33.599 2.6777 33.869 2.5752 33.962 2.5415 c
33.988 2.5073 l
33.967 2.3262 33.962 2.3066 33.947 2.1211 c
33.9 2.1016 l
33.77 2.1797 33.567 2.2969 33.231 2.2969 c
33.158 2.2969 33.085 2.292 33.008 2.2725 c
32.852 2.2334 32.722 2.1309 32.722 1.9795 c
32.722 1.7695 32.935 1.7056 33.256 1.6133 c
33.444 1.5586 l
f
n
36.96 0.6943 m
36.893 0.6406 36.779 0.5527 36.587 0.4795 c
36.442 0.4302 36.286 0.4058 36.136 0.4058 c
35.975 0.4058 35.68 0.4302 35.466 0.6699 c
35.291 0.8701 35.275 1.1099 35.27 1.2803 c
36.12 1.2857 36.26 1.2857 37.07 1.2803 c
37.106 1.3096 l
37.112 1.5249 37.122 2.0088 36.826 2.3408 c
36.67 2.5166 36.385 2.6777 35.975 2.6777 c
35.296 2.6777 34.714 2.2334 34.714 1.3242 c
34.714 0.4741 35.248 0.014702 36.099 0.014702 c
36.562 0.014702 36.841 0.1563 36.929 0.2007 c
36.96 0.2344 l
36.971 0.4253 36.977 0.4741 37.002 0.6699 c
36.96 0.6943 l
h
36.572 1.6572 m
36.094 1.6524 35.897 1.647 35.27 1.6524 c
35.321 2.1406 35.664 2.3262 35.955 2.3262 c
36.188 2.3262 36.416 2.2139 36.52 1.9453 c
36.562 1.833 36.567 1.7251 36.572 1.6572 c
f
n
42.076 1.3828 m
42.066 1.7251 41.998 2.0674 41.759 2.3262 c
41.532 2.5713 41.184 2.6777 40.831 2.6777 c
40.312 2.6777 40.011 2.478 39.866 2.3359 c
39.518 2.0088 39.508 1.5298 39.508 1.3442 c
39.508 1.1831 39.514 0.6846 39.866 0.3472 c
40.032 0.186 40.328 0.020001 40.794 0.020001 c
41.158 0.020001 41.463 0.1025 41.692 0.3184 c
41.864 0.4795 41.972 0.6699 42.03 0.9092 c
42.066 1.0557 42.076 1.2168 42.076 1.3828 c
h
41.511 1.3638 m
41.516 1.2612 41.511 0.9336 41.391 0.7139 c
41.241 0.4448 40.992 0.3862 40.8 0.3862 c
40.696 0.3862 40.587 0.4058 40.494 0.4502 c
40.084 0.6455 40.079 1.1387 40.079 1.335 c
40.079 1.54 40.095 1.8232 40.235 2.0234 c
40.417 2.2969 40.706 2.3066 40.805 2.3066 c
41.096 2.3066 41.262 2.1797 41.36 2.0283 c
41.49 1.8135 41.511 1.4858 41.511 1.3638 c
f
n
44.852 0.6553 m
44.831 0.4448 44.826 0.4209 44.811 0.2197 c
44.774 0.186 l
44.623 0.1172 44.421 0.020001 44.058 0.020001 c
43.275 0.020001 42.766 0.5527 42.766 1.3149 c
42.766 2.0918 43.264 2.6777 44.068 2.6777 c
44.406 2.6777 44.645 2.5752 44.779 2.522 c
44.8 2.4873 l
44.779 2.3115 44.774 2.2481 44.764 2.1016 c
44.722 2.082 l
44.551 2.1992 44.354 2.2725 44.146 2.2725 c
43.716 2.2725 43.337 1.96 43.337 1.335 c
43.337 0.6699 43.736 0.4302 44.141 0.4302 c
44.494 0.4302 44.712 0.6016 44.811 0.6748 c
44.852 0.6553 l
f
n
47.462 0.6553 m
47.44 0.4448 47.436 0.4209 47.419 0.2197 c
47.384 0.186 l
47.233 0.1172 47.031 0.020001 46.668 0.020001 c
45.884 0.020001 45.375 0.5527 45.375 1.3149 c
45.375 2.0918 45.874 2.6777 46.678 2.6777 c
47.015 2.6777 47.254 2.5752 47.389 2.522 c
47.41 2.4873 l
47.389 2.3115 47.384 2.2481 47.373 2.1016 c
47.332 2.082 l
47.161 2.1992 46.963 2.2725 46.756 2.2725 c
46.326 2.2725 45.947 1.96 45.947 1.335 c
45.947 0.6699 46.346 0.4302 46.75 0.4302 c
47.103 0.4302 47.321 0.6016 47.419 0.6748 c
47.462 0.6553 l
f
n
48.696 3.3281 m
48.432 3.3184 48.374 3.3135 48.121 3.2891 c
48.089 3.3184 l
48.094 3.3823 48.094 3.4507 48.094 3.5137 c
48.094 3.6021 48.089 3.6797 48.084 3.7783 c
48.121 3.8076 l
48.39 3.8267 48.437 3.8316 48.696 3.8555 c
48.728 3.8267 l
48.722 3.6265 48.722 3.5772 48.728 3.3628 c
48.696 3.3281 l
h
48.691 0.078102 m
48.421 0.073202 48.38 0.073202 48.125 0.058601 c
48.1 0.093302 l
48.115 0.3521 48.131 0.5772 48.131 1.1191 c
48.131 2.0527 48.115 2.229 48.079 2.5166 c
48.105 2.5513 l
48.328 2.5855 48.406 2.5952 48.665 2.6489 c
48.717 2.6191 l
48.702 2.3657 48.686 2.1016 48.686 1.4712 c
48.686 0.562 48.696 0.4395 48.717 0.1079 c
48.691 0.078102 l
f
n
51.363 3.8413 m
51.389 3.5581 51.415 3.2647 51.41 2.6592 c
51.27 2.6685 51.218 2.6685 51.109 2.6685 c
50.839 2.6685 50.346 2.6538 49.967 2.3316 c
49.75 2.1504 49.511 1.8135 49.511 1.2803 c
49.511 0.5381 49.988 0.024401 50.678 0.024401 c
51.057 0.024401 51.27 0.1812 51.394 0.2691 c
51.383 0.087902 l
51.42 0.058601 l
51.659 0.068901 51.721 0.073202 51.95 0.073202 c
51.975 0.1079 l
51.954 0.4448 51.934 0.8066 51.934 1.564 c
51.934 2.0527 51.939 3.2647 51.975 3.9439 c
51.939 3.9736 l
51.706 3.9248 51.654 3.915 51.389 3.8706 c
51.363 3.8413 l
h
51.389 0.6748 m
51.316 0.6162 51.124 0.4595 50.808 0.4595 c
50.538 0.4595 50.367 0.5772 50.273 0.6797 c
50.165 0.8018 50.081 1.002 50.081 1.2803 c
50.081 1.7158 50.269 1.9453 50.382 2.0479 c
50.631 2.2676 50.974 2.2774 51.134 2.2774 c
51.244 2.2774 51.306 2.2676 51.394 2.2632 c
51.399 1.4614 51.399 1.3149 51.389 0.6748 c
f
n
55.021 0.6943 m
54.953 0.6406 54.839 0.5527 54.647 0.4795 c
54.501 0.4302 54.346 0.4058 54.196 0.4058 c
54.035 0.4058 53.739 0.4302 53.527 0.6699 c
53.35 0.8701 53.334 1.1099 53.329 1.2803 c
54.18 1.2857 54.321 1.2857 55.129 1.2803 c
55.166 1.3096 l
55.171 1.5249 55.182 2.0088 54.886 2.3408 c
54.73 2.5166 54.445 2.6777 54.035 2.6777 c
53.355 2.6777 52.774 2.2334 52.774 1.3242 c
52.774 0.4741 53.308 0.014702 54.159 0.014702 c
54.621 0.014702 54.901 0.1563 54.989 0.2007 c
55.021 0.2344 l
55.031 0.4253 55.036 0.4741 55.062 0.6699 c
55.021 0.6943 l
h
54.632 1.6572 m
54.154 1.6524 53.957 1.647 53.329 1.6524 c
53.381 2.1406 53.724 2.3262 54.014 2.3262 c
54.248 2.3262 54.476 2.2139 54.58 1.9453 c
54.621 1.833 54.626 1.7251 54.632 1.6572 c
f
n
58.253 0.078102 m
58.003 0.073202 57.973 0.073202 57.734 0.058601 c
57.698 0.093302 l
57.698 0.1465 57.703 0.2007 57.703 0.2544 c
57.708 0.4941 57.708 0.7334 57.708 0.9727 c
57.708 1.7251 57.703 1.7744 57.677 1.877 c
57.579 2.2481 57.283 2.2481 57.21 2.2481 c
56.899 2.2481 56.66 2.0772 56.52 1.9746 c
56.515 1.1245 56.525 0.6797 56.561 0.1079 c
56.53 0.078102 l
56.276 0.073202 56.234 0.073202 55.985 0.058601 c
55.959 0.093302 l
55.965 0.3667 55.975 0.6304 55.975 0.9922 c
55.975 1.7744 55.938 2.1895 55.913 2.5166 c
55.944 2.5513 l
56.203 2.5952 56.249 2.605 56.494 2.6489 c
56.53 2.6152 l
56.525 2.3608 l
56.66 2.4487 56.982 2.6636 57.438 2.6636 c
57.568 2.6636 57.729 2.6441 57.869 2.5713 c
58.003 2.4976 58.113 2.3848 58.169 2.2529 c
58.238 2.1065 58.242 1.96 58.248 1.6572 c
58.248 1.085 l
58.263 0.5132 58.268 0.293 58.284 0.1079 c
58.253 0.078102 l
f
n
60.4 0.4595 m
60.385 0.2983 60.385 0.2637 60.38 0.1226 c
60.354 0.093302 l
60.245 0.068901 60.157 0.0488 59.965 0.0488 c
59.84 0.0488 59.513 0.0488 59.353 0.3032 c
59.259 0.4448 59.259 0.562 59.259 1.1387 c
59.269 2.2139 l
59.088 2.2139 59.082 2.209 58.896 2.2041 c
58.875 2.2334 l
58.885 2.3901 58.885 2.4287 58.885 2.5855 c
58.917 2.6152 l
59.031 2.6152 59.099 2.6099 59.269 2.6152 c
59.264 2.7178 59.264 2.8247 59.264 2.9273 c
59.259 3.0205 59.254 3.1133 59.248 3.2061 c
59.275 3.2402 l
59.508 3.294 59.565 3.3086 59.804 3.377 c
59.84 3.3525 l
59.825 3.0303 59.82 2.9668 59.82 2.6099 c
60.037 2.6152 60.1 2.6152 60.396 2.6245 c
60.421 2.5952 l
60.411 2.4683 60.406 2.4141 60.406 2.2481 c
60.38 2.2188 l
60.121 2.2236 60.089 2.229 59.814 2.229 c
59.804 1.3198 l
59.809 1.2612 59.809 0.9824 59.809 0.9141 c
59.809 0.5576 59.856 0.4448 60.115 0.4448 c
60.225 0.4448 60.307 0.4692 60.365 0.4888 c
60.4 0.4595 l
f
n
63.052 1.564 m
63.052 1.7695 63.052 2.0381 63.015 2.1748 c
62.907 2.5566 62.533 2.6777 62.149 2.6777 c
61.842 2.6777 61.542 2.6152 61.251 2.5166 c
61.22 2.4873 l
61.215 2.3848 61.215 2.3555 61.205 2.1309 c
61.247 2.1065 l
61.464 2.1943 61.698 2.292 62.035 2.292 c
62.294 2.292 62.413 2.1992 62.465 2.1113 c
62.512 2.0332 62.512 1.9404 62.512 1.8081 c
62.424 1.7988 l
61.49 1.6958 60.909 1.4858 60.909 0.8311 c
60.909 0.3472 61.272 0.014702 61.791 0.014702 c
62.185 0.014702 62.418 0.1904 62.517 0.2637 c
62.512 0.087902 l
62.533 0.058601 l
62.772 0.068901 62.813 0.073202 63.057 0.078102 c
63.083 0.1025 l
63.057 0.4209 63.052 0.4741 63.052 1.0801 c
63.052 1.564 l
h
62.517 1.4468 m
62.517 0.6304 l
62.46 0.582 62.273 0.4155 61.952 0.4155 c
61.459 0.4155 61.459 0.8359 61.459 0.8604 c
61.459 1.2949 61.947 1.3638 62.471 1.4375 c
62.517 1.4468 l
f
n
64.567 0.078102 m
64.317 0.073202 64.265 0.068901 64.021 0.058601 c
63.996 0.093302 l
64.006 0.4395 64.021 0.8799 64.021 1.8184 c
64.021 2.4927 64.021 3.2158 63.97 3.8413 c
63.996 3.8706 l
64.25 3.9102 64.302 3.9194 64.561 3.9736 c
64.593 3.9395 l
64.556 3.2988 64.556 2.6538 64.556 2.0137 c
64.556 0.9434 64.572 0.5718 64.598 0.1079 c
64.567 0.078102 l
f
n
67.648 0.6943 m
67.581 0.6406 67.467 0.5527 67.275 0.4795 c
67.129 0.4302 66.974 0.4058 66.824 0.4058 c
66.663 0.4058 66.367 0.4302 66.154 0.6699 c
65.978 0.8701 65.962 1.1099 65.957 1.2803 c
66.808 1.2857 66.948 1.2857 67.757 1.2803 c
67.794 1.3096 l
67.798 1.5249 67.81 2.0088 67.514 2.3408 c
67.358 2.5166 67.072 2.6777 66.663 2.6777 c
65.983 2.6777 65.402 2.2334 65.402 1.3242 c
65.402 0.4741 65.937 0.014702 66.787 0.014702 c
67.249 0.014702 67.529 0.1563 67.618 0.2007 c
67.648 0.2344 l
67.659 0.4253 67.664 0.4741 67.69 0.6699 c
67.648 0.6943 l
h
67.259 1.6572 m
66.782 1.6524 66.585 1.647 65.957 1.6524 c
66.009 2.1406 66.351 2.3262 66.642 2.3262 c
66.876 2.3262 67.104 2.2139 67.207 1.9453 c
67.249 1.833 67.254 1.7251 67.259 1.6572 c
f
n
52.613 21.092 m
53.513 20.816 55.563 20.159 55.563 17.91 c
55.563 17.062 55.225 16.107 54.301 15.406 c
53.108 14.452 51.509 14.388 50.698 14.388 c
49.482 14.388 48.468 14.601 47.613 14.919 c
47.5 14.961 47.387 15.003 47.275 15.046 c
47.163 15.237 l
47.252 16.065 47.252 16.171 47.297 17.019 c
47.523 17.083 l
47.928 16.786 48.919 16.065 50.653 16.065 c
52.432 16.065 53.085 16.998 53.085 17.655 c
53.085 18.631 52.117 18.949 50.743 19.374 c
50.023 19.607 l
49.099 19.883 47.073 20.498 47.073 22.683 c
47.073 24.868 49.099 25.95 51.622 25.95 c
53.289 25.95 54.459 25.504 54.865 25.356 c
54.978 25.207 l
54.887 24.423 54.865 24.338 54.797 23.531 c
54.594 23.447 l
54.031 23.786 53.153 24.295 51.689 24.295 c
51.374 24.295 51.058 24.274 50.721 24.189 c
50.045 24.02 49.482 23.574 49.482 22.917 c
49.482 22.004 50.405 21.729 51.802 21.325 c
52.613 21.092 l
f
n
68.603 20.329 m
68.557 21.813 68.265 23.299 67.229 24.423 c
66.238 25.483 64.729 25.95 63.198 25.95 c
60.945 25.95 59.639 25.08 59.008 24.465 c
57.5 23.044 57.455 20.965 57.455 20.159 c
57.455 19.459 57.477 17.295 59.008 15.831 c
59.729 15.131 61.013 14.409 63.04 14.409 c
64.616 14.409 65.945 14.771 66.936 15.704 c
67.679 16.403 68.152 17.232 68.399 18.271 c
68.557 18.907 68.603 19.607 68.603 20.329 c
h
66.148 20.244 m
66.17 19.798 66.148 18.377 65.629 17.422 c
64.977 16.255 63.895 16.001 63.063 16.001 c
62.612 16.001 62.138 16.086 61.733 16.276 c
59.955 17.125 59.932 19.268 59.932 20.116 c
59.932 21.007 59.999 22.237 60.607 23.107 c
61.396 24.295 62.657 24.338 63.085 24.338 c
64.346 24.338 65.067 23.786 65.495 23.129 c
66.058 22.195 66.148 20.774 66.148 20.244 c
f
n
44.503 20.154 m
44.503 19.414 43.903 18.813 43.163 18.813 c
42.422 18.813 41.823 19.414 41.823 20.154 c
41.823 20.894 42.422 21.495 43.163 21.495 c
43.903 21.495 44.503 20.894 44.503 20.154 c
f
n
13.648 29.478 m
13.625 27.844 13.602 26.847 13.602 25.362 c
13.602 21.798 13.67 18.255 13.851 14.691 c
13.738 14.565 l
11.824 14.586 11.373 14.565 9.6841 14.501 c
9.5713 14.628 l
9.6841 17.619 9.6841 18.319 9.6392 21.183 c
8.7383 21.204 7.8374 21.225 6.9365 21.225 c
6.0581 21.225 5.2251 21.204 4.2344 21.161 c
4.2563 18.086 4.2788 17.322 4.4141 14.691 c
4.3018 14.565 l
2.3198 14.586 1.9146 14.565 0.27051 14.501 c
0.15771 14.628 l
0.20263 16.409 0.24804 17.449 0.24804 19.358 c
0.24804 24.619 0.11279 27.229 0.0 29.414 c
0.13525 29.542 l
2.0942 29.542 2.4321 29.542 4.1665 29.604 c
4.2788 29.478 l
4.2344 23.877 l
5.0225 23.877 5.8325 23.856 6.6206 23.856 c
7.6348 23.856 8.6255 23.877 9.6167 23.898 c
9.5942 26.402 9.5942 27.017 9.436 29.414 c
9.5493 29.542 l
11.441 29.542 11.733 29.542 13.535 29.604 c
13.648 29.478 l
[/Separation (PANTONE 3015 CVU) /N10 /ColorSpace findRes /N23 /Function findRes ] cs 1.0 sc
f
n
26.706 17.704 m
25.85 17.279 24.836 16.792 23.193 16.792 c
21.841 16.792 20.917 17.194 20.377 17.959 c
20.04 18.404 19.972 18.828 19.882 19.253 c
27.157 19.38 l
27.291 19.528 l
27.269 20.567 27.247 21.629 26.932 22.689 c
26.143 25.192 24.409 25.702 23.643 25.872 c
23.08 26.02 22.562 26.062 22.044 26.062 c
18.508 26.062 16.165 23.877 16.165 20.207 c
16.165 19.21 16.346 18.171 16.706 17.428 c
18.013 14.565 21.076 14.31 22.698 14.31 c
24.567 14.31 25.377 14.628 26.571 15.073 c
26.706 15.243 l
26.864 17.64 l
26.706 17.704 l
h
19.882 21.501 m
19.95 22.159 20.107 23.05 20.963 23.559 c
21.233 23.729 21.549 23.792 21.864 23.792 c
22.607 23.792 23.057 23.432 23.305 23.05 c
23.621 22.583 23.643 22.074 23.643 21.586 c
19.882 21.501 l
f
n
36.209 21.501 m
37.448 21.055 39.183 20.44 39.183 18.107 c
39.183 17.959 39.183 17.81 39.16 17.64 c
38.754 14.607 35.376 14.31 33.665 14.31 c
32.021 14.31 31.075 14.649 29.971 15.031 c
29.859 15.222 l
29.949 16.282 29.971 16.516 30.017 17.619 c
30.219 17.704 l
30.557 17.449 30.737 17.3 31.12 17.109 c
31.953 16.707 32.876 16.516 33.507 16.516 c
34.768 16.516 35.287 17.088 35.287 17.619 c
35.287 18.383 34.295 18.701 33.688 18.892 c
32.831 19.189 l
31.773 19.57 29.904 20.25 29.904 22.52 c
29.904 23.368 30.219 24.004 30.512 24.386 c
31.683 25.978 33.89 26.062 34.994 26.062 c
36.458 26.062 37.381 25.808 38.439 25.532 c
38.551 25.405 l
38.327 23.092 l
38.124 23.028 l
37.561 23.368 36.682 23.919 35.309 23.919 c
33.913 23.919 33.732 23.22 33.732 22.965 c
33.732 22.371 34.34 22.138 35.106 21.883 c
36.209 21.501 l
f
Q
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
