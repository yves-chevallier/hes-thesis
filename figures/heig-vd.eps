%!PS-Adobe-3.0 EPSF-3.0
%%Title: (HEIG-VD [QUADRI] F.eps)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 16:32:12 11/17/05
%%For: (Yves )
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 510 159
%%HiResBoundingBox: 0.0 0.0 509.636 159.195
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3678 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-701">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2005-11-17T16:32:12+01:00</xap:CreateDate>
         <xap:ModifyDate>2005-11-17T16:32:12+01:00</xap:ModifyDate>
         <xap:MetadataDate>2005-11-17T16:32:12+01:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:77D6B7527F57DA119F35986F4481192E</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:77D6B7527F57DA119F35986F4481192E</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:7cea3091-55a9-4bc5-bf50-e49b7a20df5e</stRef:instanceID>
            <stRef:documentID>uuid:ed35e773-441b-4685-947b-9b71ebd531fa</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">HEIG-VD [QUADRI] F.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Yves </rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 509.636 159.195 rectclip
/N10 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

q
0.0 0.0 m
509.636 0.0 l
509.636 159.195 l
0.0 159.195 l
h
W
n
n
30.991 92.611 m
30.991 124.386 l
30.991 131.462 29.885 138.9 19.143 138.9 c
15.104 138.9 12.713 137.798 10.881 136.242 c
7.2954 133.207 6.5611 128.16 6.5611 124.578 c
6.5611 92.611 l
1.3238 92.611 l
1.3238 159.023 l
6.5611 159.023 l
6.5611 135.32 l
7.1118 137.984 11.52 143.496 20.061 143.496 c
26.674 143.496 31.358 141.015 33.469 137.798 c
35.858 134.308 36.225 130.179 36.225 124.578 c
36.225 92.611 l
30.991 92.611 l
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E1 exch /ColorSpace defineRes

cs 0.64706 0.18824 0.20784 sc
f
n
49.544 116.126 m
49.544 116.126 49.544 115.207 49.544 114.382 c
49.819 109.79 51.102 97.019 66.995 97.019 c
76.692 97.019 81.643 103.937 81.643 103.937 c
80.981 97.476 l
80.981 97.476 75.999 92.246 66.809 92.246 c
45.594 92.246 44.036 109.79 44.036 117.322 c
44.036 125.312 46.331 143.406 64.143 143.496 c
82.331 143.589 83.251 123.746 83.251 118.609 c
83.251 117.322 83.251 116.126 83.251 116.126 c
49.544 116.126 l
h
64.331 139.081 m
50.003 139.359 49.819 121.73 49.819 120.535 c
77.92 120.535 l
77.92 120.535 78.288 138.808 64.331 139.081 c
f
n
150.197998 113.581001 21.080002 5.080101 rectfill

n
233.448 91.882 m
220.223 91.882 214.62 103.664 214.62 117.941 c
214.62 131.863 222.151 143.406 233.811 143.308 c
242.167 143.224 246.03 138.296 246.573 136.168 c
246.573 159.195 l
251.815 159.195 l
251.815 159.195 251.815 115.546 251.815 110.468 c
251.815 103.55 247.712 91.882 233.448 91.882 c
h
246.573 124.027 m
246.573 126.457 246.118 132.304 243.335 135.392 c
241.483 137.55 238.331 139.043 234.075 139.043 c
224.993 139.043 219.897 129.451 219.983 117.75 c
220.081 106.429 224.061 96.507 234.075 96.507 c
242.413 96.507 246.573 103.39 246.573 109.486 c
246.573 124.027 l
f
n
207.092 142.3 m
207.092 142.3 193.594 99.289 193.417 98.82 c
193.11 98.0 193.026 98.062 192.758 98.867 c
192.596 99.355 179.131 142.3 179.131 142.3 c
173.792 142.3 l
188.551 95.871 l
189.649 93.271 191.003 92.195 193.092 92.195 c
195.192 92.195 196.557 93.255 197.659 95.871 c
197.663 95.878 212.399 142.3 212.399 142.3 c
207.092 142.3 l
f
n
91.973000 92.611000 5.228500 49.689995 rectfill

n
91.973000 150.279007 5.255798 5.398407 rectfill

n
126.335 102.171 m
121.557 102.171 111.637 100.968 111.637 105.841 c
111.637 110.154 118.71 109.605 125.598 109.605 c
136.534 109.605 143.143 116.052 143.143 126.318 c
143.143 131.693 141.256 136.107 137.848 139.128 c
143.688 139.128 l
143.688 143.496 l
125.229 143.496 l
125.229 143.464 l
125.112 143.464 125.003 143.496 124.881 143.496 c
117.075 143.496 108.424 139.269 108.424 126.318 c
108.424 117.687 114.12 113.283 116.229 112.91 c
114.12 112.91 106.491 111.804 106.674 105.013 c
106.774 101.246 108.794 99.316 113.016 98.585 c
110.631 97.751 106.401 93.996 106.401 88.203 c
106.401 81.134 112.835 75.437 125.784 75.437 c
136.344 75.437 144.335 80.029 144.52 89.035 c
144.706 97.574 139.003 102.171 126.335 102.171 c
h
113.385 126.318 m
113.385 133.749 116.971 139.081 125.598 139.081 c
134.889 139.081 138.178 132.476 138.178 126.318 c
138.178 117.871 132.854 113.644 125.229 113.644 c
118.526 113.644 113.385 118.79 113.385 126.318 c
h
125.784 79.851 m
116.417 79.851 111.268 83.615 111.268 89.035 c
111.268 93.164 114.854 96.652 117.612 97.386 c
117.612 97.386 122.018 97.484 125.967 97.386 c
136.534 97.296 139.561 93.349 139.561 89.035 c
139.561 82.878 132.491 79.851 125.784 79.851 c
f
n
14.476 38.492 m
14.476 49.372 l
3.937 49.372 l
3.937 38.492 l
1.333 38.492 l
1.333 61.307 l
3.937 61.307 l
3.937 51.853 l
14.476 51.853 l
14.476 61.307 l
17.08 61.307 l
17.08 38.492 l
14.476 38.492 l
true setoverprint
0.13725 0.12157 0.12549 sc
f
n
31.834 38.492 m
31.276 38.492 31.183 38.523 30.966 38.709 c
30.842 38.833 30.749 39.05 30.749 39.392 c
30.749 40.507 l
29.819 39.205 28.362 38.183 25.572 38.275 c
21.388 38.399 20.737 41.716 20.737 43.234 c
20.737 43.917 20.892 45.032 21.605 46.087 c
23.124 48.318 25.79 48.876 28.331 48.876 c
29.695 48.876 30.718 48.69 30.718 48.69 c
30.718 49.683 l
30.718 50.364 30.842 51.666 30.005 52.534 c
29.416 53.154 28.331 53.588 26.533 53.588 c
23.744 53.557 22.349 52.255 22.349 52.255 c
22.783 54.673 l
22.783 54.673 24.147 55.665 27.061 55.665 c
29.23 55.665 30.811 55.076 31.71 54.147 c
32.764 52.999 33.012 51.914 33.012 49.683 c
33.012 38.492 l
31.834 38.492 l
h
30.687 46.831 m
30.687 46.831 29.726 47.017 28.548 47.017 c
25.758 47.017 23.774 46.148 23.372 44.351 c
23.279 43.948 23.279 43.669 23.279 43.421 c
23.279 41.22 24.859 40.259 26.781 40.259 c
27.029 40.259 27.649 40.321 28.084 40.445 c
29.478 40.879 30.687 41.809 30.687 43.204 c
30.687 46.831 l
f
n
48.386 38.492 m
47.828 38.492 47.766 38.523 47.549 38.709 c
47.395 38.833 47.333 39.05 47.333 39.392 c
47.333 40.507 l
46.434 39.268 45.007 38.275 42.559 38.275 c
40.823 38.275 39.707 38.648 38.746 39.546 c
37.537 40.693 37.227 42.274 37.227 44.443 c
37.227 55.262 l
39.552 55.262 l
39.552 44.537 l
39.552 43.266 39.459 42.181 40.606 41.096 c
41.071 40.631 41.908 40.29 42.993 40.29 c
45.069 40.29 47.271 41.623 47.271 43.514 c
47.271 55.262 l
49.595 55.262 l
49.595 38.492 l
48.386 38.492 l
f
n
61.064 38.833 m
61.064 38.833 59.979 38.337 58.832 38.337 c
56.353 38.337 55.05 40.073 55.05 42.584 c
55.05 53.34 l
52.54 53.34 l
52.974 55.262 l
55.112 55.262 l
55.298 58.827 l
57.406 59.198 l
57.406 55.262 l
61.064 55.262 l
60.63 53.34 l
57.438 53.34 l
57.438 42.429 l
57.438 41.251 58.243 40.507 59.266 40.507 c
60.258 40.507 61.25 40.91 61.25 40.91 c
61.064 38.833 l
f
n
76.19 46.211 m
65.279 46.211 l
65.279 46.211 65.248 46.087 65.248 45.746 c
65.248 44.785 65.496 40.693 70.672 40.538 c
74.237 40.445 75.756 41.995 75.756 41.995 c
75.415 39.546 l
75.384 39.546 73.679 38.337 70.58 38.337 c
63.202 38.337 62.675 44.258 62.675 46.861 c
62.675 49.62 63.481 55.665 69.649 55.696 c
75.849 55.758 76.221 49.187 76.221 47.109 c
76.221 46.676 76.19 46.211 76.19 46.211 c
h
69.681 53.712 m
65.155 53.836 65.31 48.133 65.31 48.133 c
73.71 48.133 l
73.71 48.133 73.834 53.588 69.681 53.712 c
f
n
101.732 38.492 m
89.581 38.492 l
89.581 61.275 l
101.546 61.275 l
102.135 58.857 l
92.185 58.857 l
92.185 51.542 l
100.926 51.542 l
100.926 49.0 l
92.185 49.0 l
92.185 40.972 l
102.507 40.972 l
101.732 38.492 l
f
n
116.61 39.515 m
116.61 39.515 114.657 38.307 112.084 38.307 c
111.03 38.307 109.542 38.461 108.272 39.205 c
106.133 40.476 104.738 43.234 104.738 46.861 c
104.738 50.303 106.35 55.665 112.146 55.665 c
115.122 55.665 116.238 54.456 116.238 54.456 c
116.61 52.131 l
116.61 52.131 115.184 53.557 112.642 53.557 c
109.667 53.557 107.341 51.914 107.341 46.831 c
107.341 43.358 108.798 40.507 112.797 40.569 c
115.401 40.631 116.982 42.212 116.982 42.212 c
116.61 39.515 l
f
n
126.684 38.275 m
121.445 38.337 119.616 41.561 119.616 46.769 c
119.616 51.388 121.414 55.665 126.684 55.634 c
132.17 55.603 133.503 51.356 133.503 46.8 c
133.503 42.026 131.116 38.244 126.684 38.275 c
h
126.715 53.65 m
122.809 53.681 122.065 50.116 122.065 46.676 c
122.065 42.429 123.491 40.29 126.715 40.29 c
129.783 40.29 131.023 43.234 131.023 46.707 c
131.023 49.559 130.682 53.619 126.715 53.65 c
f
n
137.501007 38.492001 2.325195 22.875999 rectfill

n
157.433 46.211 m
146.522 46.211 l
146.522 46.211 146.491 46.087 146.491 45.746 c
146.491 44.785 146.739 40.693 151.916 40.538 c
155.48 40.445 156.999 41.995 156.999 41.995 c
156.658 39.546 l
156.627 39.546 154.922 38.337 151.822 38.337 c
144.445 38.337 143.918 44.258 143.918 46.861 c
143.918 49.62 144.724 55.665 150.893 55.696 c
157.092 55.758 157.464 49.187 157.464 47.109 c
157.464 46.676 157.433 46.211 157.433 46.211 c
h
150.923 53.712 m
146.398 53.836 146.553 48.133 146.553 48.133 c
154.953 48.133 l
154.953 48.133 155.077 53.588 150.923 53.712 c
f
n
180.371 38.492 m
180.371 40.105 l
179.007 38.802 177.705 38.275 176.031 38.275 c
171.196 38.275 169.491 42.181 169.491 46.861 c
169.491 49.62 170.452 55.634 176.063 55.634 c
179.286 55.634 180.247 53.867 180.247 53.867 c
180.247 61.368 l
182.541 61.368 l
182.541 38.492 l
180.371 38.492 l
h
180.247 49.527 m
180.247 50.612 179.999 51.728 179.286 52.503 c
178.635 53.216 177.612 53.65 176.279 53.65 c
172.219 53.65 172.064 48.846 172.095 46.831 c
172.126 43.545 173.056 40.445 176.435 40.445 c
177.21 40.445 177.984 40.569 178.635 40.91 c
179.627 41.406 180.247 42.243 180.247 42.243 c
180.247 49.527 l
f
n
188.554 54.425 m
187.687 54.425 l
187.191 61.679 l
189.05 61.679 l
188.554 54.425 l
f
n
194.350998 38.492001 2.604004 22.813999 rectfill

n
212.081 38.492 m
212.081 49.248 l
212.081 51.512 211.864 53.65 208.423 53.65 c
207.246 53.65 206.378 53.371 205.727 52.782 c
204.456 51.666 204.332 49.992 204.332 48.938 c
204.332 38.492 l
202.007 38.492 l
202.007 55.262 l
204.332 55.262 l
204.332 53.216 l
204.518 53.774 205.881 55.696 208.888 55.696 c
211.058 55.696 212.515 55.045 213.414 53.712 c
214.22 52.503 214.375 51.232 214.375 49.311 c
214.375 38.492 l
212.081 38.492 l
f
n
223.922 32.571 m
220.792 32.571 219.086 33.812 219.086 33.812 c
218.714 36.23 l
218.714 36.229 220.233 34.711 223.798 34.804 c
228.975 34.958 228.882 38.337 228.882 39.392 c
228.882 39.732 228.882 39.67 228.882 39.856 c
228.882 40.507 l
227.518 39.205 226.216 38.678 224.542 38.678 c
219.707 38.678 218.002 42.181 218.002 46.861 c
218.002 49.62 218.962 55.634 224.573 55.634 c
227.797 55.634 228.758 53.867 228.758 53.867 c
228.758 55.262 l
231.052 55.262 l
231.052 38.431 l
231.052 34.834 228.603 32.571 223.922 32.571 c
h
228.758 49.527 m
228.758 50.612 228.51 51.728 227.797 52.503 c
227.146 53.216 226.123 53.65 224.79 53.65 c
220.729 53.65 220.574 48.846 220.605 46.831 c
220.636 43.545 221.566 40.848 224.945 40.848 c
225.72 40.848 226.495 41.003 227.146 41.314 c
228.138 41.809 228.758 42.645 228.758 42.645 c
228.758 49.527 l
f
n
247.511 46.211 m
236.6 46.211 l
236.6 46.211 236.569 46.087 236.569 45.746 c
236.569 44.785 236.817 40.693 241.994 40.538 c
245.559 40.445 247.077 41.995 247.077 41.995 c
246.736 39.546 l
246.705 39.546 245.0 38.337 241.901 38.337 c
234.524 38.337 233.996 44.258 233.996 46.861 c
233.996 49.62 234.802 55.665 240.971 55.696 c
247.17 55.758 247.542 49.187 247.542 47.109 c
247.542 46.676 247.511 46.211 247.511 46.211 c
h
241.002 53.712 m
236.476 53.836 236.631 48.133 236.631 48.133 c
245.031 48.133 l
245.031 48.133 245.155 53.588 241.002 53.712 c
h
238.429 57.06 m
238.429 58.548 l
242.118 61.399 l
243.233 59.788 l
238.429 57.06 l
f
n
261.336 38.492 m
261.336 49.248 l
261.336 51.512 261.119 53.65 257.679 53.65 c
256.501 53.65 255.632 53.371 254.982 52.782 c
253.711 51.666 253.586 49.992 253.586 48.938 c
253.586 38.492 l
251.262 38.492 l
251.262 55.262 l
253.586 55.262 l
253.586 53.216 l
253.772 53.774 255.137 55.696 258.144 55.696 c
260.314 55.696 261.769 55.045 262.669 53.712 c
263.474 52.503 263.63 51.232 263.63 49.311 c
263.63 38.492 l
261.336 38.492 l
f
n
269.179 58.331 m
268.466 58.331 267.691 58.609 267.722 59.664 c
267.753 60.407 268.404 60.842 269.179 60.842 c
269.892 60.842 270.574 60.407 270.574 59.664 c
270.574 58.827 269.953 58.331 269.179 58.331 c
h
268.0 38.492 m
270.326 38.492 -2.3262 16.769 re
268.0 38.492 m
f
n
287.623 46.211 m
276.711 46.211 l
276.711 46.211 276.679 46.087 276.679 45.746 c
276.679 44.785 276.927 40.693 282.105 40.538 c
285.669 40.445 287.189 41.995 287.189 41.995 c
286.847 39.546 l
286.816 39.546 285.111 38.337 282.011 38.337 c
274.634 38.337 274.107 44.258 274.107 46.861 c
274.107 49.62 274.914 55.665 281.082 55.696 c
287.281 55.758 287.654 49.187 287.654 47.109 c
287.654 46.676 287.623 46.211 287.623 46.211 c
h
281.113 53.712 m
276.587 53.836 276.742 48.133 276.742 48.133 c
285.142 48.133 l
285.142 48.133 285.267 53.588 281.113 53.712 c
f
n
297.169 53.402 m
295.619 53.371 294.814 52.72 294.255 51.728 c
293.636 50.551 293.697 49.187 293.697 48.287 c
293.697 38.492 l
291.373 38.492 l
291.373 55.262 l
293.697 55.262 l
293.697 53.154 l
293.697 53.154 294.224 54.239 295.031 54.859 c
295.806 55.448 296.58 55.634 297.355 55.634 c
297.789 55.634 297.974 55.603 298.378 55.51 c
298.906 55.386 299.371 55.107 299.371 55.107 c
299.773 52.596 l
298.966 53.216 298.13 53.433 297.169 53.402 c
f
n
303.988 58.331 m
303.275 58.331 302.5 58.609 302.531 59.664 c
302.562 60.407 303.214 60.842 303.988 60.842 c
304.701 60.842 305.382 60.407 305.382 59.664 c
305.382 58.827 304.763 58.331 303.988 58.331 c
h
302.81 38.492 m
305.136 38.492 -2.3262 16.769 re
302.81 38.492 m
f
n
322.431 46.211 m
311.521 46.211 l
311.521 46.211 311.49 46.087 311.49 45.746 c
311.49 44.785 311.738 40.693 316.914 40.538 c
320.48 40.445 321.998 41.995 321.998 41.995 c
321.658 39.546 l
321.626 39.546 319.921 38.337 316.822 38.337 c
309.445 38.337 308.918 44.258 308.918 46.861 c
308.918 49.62 309.722 55.665 315.892 55.696 c
322.091 55.758 322.462 49.187 322.462 47.109 c
322.462 46.676 322.431 46.211 322.431 46.211 c
h
315.923 53.712 m
311.396 53.836 311.552 48.133 311.552 48.133 c
319.953 48.133 l
319.953 48.133 320.076 53.588 315.923 53.712 c
f
n
348.005 46.211 m
337.093 46.211 l
337.093 46.211 337.062 46.087 337.062 45.746 c
337.062 44.785 337.31 40.693 342.488 40.538 c
346.052 40.445 347.572 41.995 347.572 41.995 c
347.23 39.546 l
347.199 39.546 345.494 38.337 342.394 38.337 c
335.017 38.337 334.49 44.258 334.49 46.861 c
334.49 49.62 335.296 55.665 341.464 55.696 c
347.664 55.758 348.037 49.187 348.037 47.109 c
348.037 46.676 348.005 46.211 348.005 46.211 c
h
341.496 53.712 m
336.97 53.836 337.125 48.133 337.125 48.133 c
345.525 48.133 l
345.525 48.133 345.65 53.588 341.496 53.712 c
f
n
358.73 38.833 m
358.73 38.833 357.644 38.337 356.498 38.337 c
354.019 38.337 352.716 40.073 352.716 42.584 c
352.716 53.34 l
350.205 53.34 l
350.64 55.262 l
352.779 55.262 l
352.964 58.827 l
355.072 59.198 l
355.072 55.262 l
358.73 55.262 l
358.296 53.34 l
355.103 53.34 l
355.103 42.429 l
355.103 41.251 355.91 40.507 356.931 40.507 c
357.923 40.507 358.916 40.91 358.916 40.91 c
358.73 38.833 l
f
n
380.892 38.492 m
380.892 40.105 l
379.529 38.802 378.226 38.275 376.552 38.275 c
371.718 38.275 370.013 42.181 370.013 46.861 c
370.013 49.62 370.974 55.634 376.583 55.634 c
379.808 55.634 380.769 53.867 380.769 53.867 c
380.769 61.368 l
383.062 61.368 l
383.062 38.492 l
380.892 38.492 l
h
380.769 49.527 m
380.769 50.612 380.521 51.728 379.808 52.503 c
379.158 53.216 378.134 53.65 376.8 53.65 c
372.74 53.65 372.586 48.846 372.617 46.831 c
372.648 43.545 373.578 40.445 376.957 40.445 c
377.73 40.445 378.505 40.569 379.158 40.91 c
380.148 41.406 380.769 42.243 380.769 42.243 c
380.769 49.527 l
f
n
400.513 46.211 m
389.603 46.211 l
389.603 46.211 389.572 46.087 389.572 45.746 c
389.572 44.785 389.82 40.693 394.996 40.538 c
398.562 40.445 400.08 41.995 400.08 41.995 c
399.74 39.546 l
399.708 39.546 398.003 38.337 394.904 38.337 c
387.527 38.337 387.0 44.258 387.0 46.861 c
387.0 49.62 387.804 55.665 393.974 55.696 c
400.173 55.758 400.544 49.187 400.544 47.109 c
400.544 46.676 400.513 46.211 400.513 46.211 c
h
394.005 53.712 m
389.478 53.836 389.634 48.133 389.634 48.133 c
398.035 48.133 l
398.035 48.133 398.158 53.588 394.005 53.712 c
f
n
426.863 38.399 m
425.746 38.244 424.878 38.213 423.701 38.213 c
420.353 38.213 418.369 39.144 416.849 40.507 c
414.029 43.08 413.501 47.574 413.501 49.837 c
413.501 51.356 413.533 55.789 417.191 59.075 c
418.648 60.407 420.755 61.586 424.197 61.586 c
427.265 61.586 428.597 60.718 428.597 60.718 c
429.187 58.176 l
429.187 58.176 427.265 59.198 424.537 59.198 c
421.902 59.198 420.074 58.393 418.679 56.905 c
417.005 55.138 416.322 52.751 416.322 49.899 c
416.322 45.963 417.377 43.731 418.896 42.367 c
420.197 41.189 421.902 40.755 423.98 40.755 c
426.148 40.755 426.986 41.065 426.986 41.065 c
426.986 48.257 l
423.669 48.257 l
423.669 50.675 l
429.589 50.675 l
429.589 38.988 l
429.589 38.988 428.289 38.585 426.863 38.399 c
f
n
447.134 46.211 m
436.222 46.211 l
436.222 46.211 436.191 46.087 436.191 45.746 c
436.191 44.785 436.439 40.693 441.617 40.538 c
445.181 40.445 446.701 41.995 446.701 41.995 c
446.359 39.546 l
446.328 39.546 444.623 38.337 441.523 38.337 c
434.146 38.337 433.619 44.258 433.619 46.861 c
433.619 49.62 434.425 55.665 440.593 55.696 c
446.793 55.758 447.166 49.187 447.166 47.109 c
447.166 46.676 447.134 46.211 447.134 46.211 c
h
440.625 53.712 m
436.099 53.836 436.253 48.133 436.253 48.133 c
444.654 48.133 l
444.654 48.133 444.779 53.588 440.625 53.712 c
f
n
459.191 39.763 m
458.107 38.74 456.619 38.307 454.882 38.307 c
452.341 38.307 451.07 39.019 450.171 39.515 c
449.8 42.212 l
449.8 42.212 452.279 40.569 454.697 40.569 c
456.898 40.569 457.984 41.375 457.984 43.173 c
457.984 46.676 450.109 45.622 450.109 51.14 c
450.109 53.898 452.373 55.634 455.378 55.634 c
458.478 55.634 459.285 54.456 459.285 54.456 c
459.658 52.131 l
459.658 52.131 458.386 53.526 455.566 53.526 c
453.582 53.526 452.589 52.596 452.589 51.046 c
452.589 49.311 454.791 48.598 456.31 47.946 c
458.726 46.954 460.525 45.715 460.525 43.297 c
460.525 41.747 460.029 40.569 459.191 39.763 c
f
n
470.58 38.833 m
470.58 38.833 469.496 38.337 468.349 38.337 c
465.869 38.337 464.566 40.073 464.566 42.584 c
464.566 53.34 l
462.056 53.34 l
462.49 55.262 l
464.628 55.262 l
464.814 58.827 l
466.923 59.198 l
466.923 55.262 l
470.58 55.262 l
470.146 53.34 l
466.953 53.34 l
466.953 42.429 l
466.953 41.251 467.759 40.507 468.783 40.507 c
469.775 40.507 470.765 40.91 470.765 40.91 c
470.58 38.833 l
f
n
474.734 58.331 m
474.021 58.331 473.246 58.609 473.277 59.664 c
473.308 60.407 473.958 60.842 474.734 60.842 c
475.447 60.842 476.128 60.407 476.128 59.664 c
476.128 58.827 475.509 58.331 474.734 58.331 c
h
473.556 38.492 m
475.88 38.492 -2.32419 16.769 re
473.556 38.492 m
f
n
486.73 38.275 m
481.492 38.337 479.662 41.561 479.662 46.769 c
479.662 51.388 481.46 55.665 486.73 55.634 c
492.216 55.603 493.548 51.356 493.548 46.8 c
493.548 42.026 491.162 38.244 486.73 38.275 c
h
486.761 53.65 m
482.855 53.681 482.111 50.116 482.111 46.676 c
482.111 42.429 483.537 40.29 486.761 40.29 c
489.83 40.29 491.07 43.234 491.07 46.707 c
491.07 49.559 490.728 53.619 486.761 53.65 c
f
n
507.343 38.492 m
507.343 49.248 l
507.343 51.512 507.127 53.65 503.685 53.65 c
502.507 53.65 501.64 53.371 500.988 52.782 c
499.718 51.666 499.593 49.992 499.593 48.938 c
499.593 38.492 l
497.269 38.492 l
497.269 55.262 l
499.593 55.262 l
499.593 53.216 l
499.779 53.774 501.144 55.696 504.15 55.696 c
506.32 55.696 507.777 55.045 508.675 53.712 c
509.482 52.503 509.636 51.232 509.636 49.311 c
509.636 38.492 l
507.343 38.492 l
f
n
10.88 0.3418 m
10.88 1.9531 l
9.5166 0.65138 8.2149 0.12401 6.5406 0.12401 c
1.7051 0.12401 0.0 4.0303 0.0 8.7109 c
0.0 11.47 0.961 17.483 6.5718 17.483 c
9.7954 17.483 10.756 15.716 10.756 15.716 c
10.756 23.218 l
13.05 23.218 l
13.05 0.3418 l
10.88 0.3418 l
h
10.756 11.377 m
10.756 12.462 10.508 13.577 9.7954 14.353 c
9.1446 15.065 8.1216 15.499 6.7886 15.499 c
2.7281 15.499 2.5733 10.694 2.604 8.6797 c
2.6353 5.3935 3.565 2.2939 6.9439 2.2939 c
7.7188 2.2939 8.4937 2.418 9.1446 2.7588 c
10.137 3.2549 10.756 4.0918 10.756 4.0918 c
10.756 11.377 l
f
n
28.797 0.3418 m
28.239 0.3418 28.177 0.37209 27.96 0.55863 c
27.805 0.68262 27.743 0.89941 27.743 1.2402 c
27.743 2.3564 l
26.844 1.1162 25.418 0.12401 22.969 0.12401 c
21.233 0.12401 20.118 0.49611 19.157 1.3955 c
17.948 2.542 17.638 4.123 17.638 6.293 c
17.638 17.111 l
19.962 17.111 l
19.962 6.3857 l
19.962 5.1152 19.87 4.0303 21.017 2.9453 c
21.482 2.4805 22.318 2.1396 23.403 2.1396 c
25.48 2.1396 27.681 3.4717 27.681 5.3633 c
27.681 17.111 l
30.006 17.111 l
30.006 0.3418 l
28.797 0.3418 l
f
n
58.089 1.0547 m
58.089 1.0547 56.508 0.0 52.944 0.0 c
50.402 0.0 48.542 0.77543 46.868 2.2939 c
44.078 4.8359 43.769 9.5166 43.769 11.687 c
43.769 13.112 44.14 17.762 47.178 20.8 c
48.697 22.288 50.867 23.373 54.029 23.373 c
56.416 23.373 57.687 22.505 57.687 22.505 c
58.275 19.994 l
58.275 19.994 56.416 21.017 53.75 21.017 c
51.332 21.017 49.844 20.087 48.666 18.723 c
47.24 17.049 46.558 14.601 46.558 11.748 c
46.558 8.3076 47.488 5.5801 48.976 4.2158 c
50.278 3.0381 51.766 2.6045 54.06 2.6045 c
56.23 2.6045 58.896 3.9678 58.988 4.0303 c
58.089 1.0547 l
f
n
72.503 0.3418 m
71.944 0.3418 71.852 0.37209 71.634 0.55863 c
71.511 0.68262 71.418 0.89941 71.418 1.2402 c
71.418 2.3564 l
70.488 1.0547 69.031 0.031227 66.241 0.12401 c
62.056 0.24802 61.405 3.5654 61.405 5.084 c
61.405 5.7656 61.56 6.8818 62.273 7.9355 c
63.792 10.168 66.458 10.726 68.999 10.726 c
70.364 10.726 71.387 10.54 71.387 10.54 c
71.387 11.531 l
71.387 12.214 71.511 13.516 70.673 14.384 c
70.085 15.003 68.999 15.437 67.202 15.437 c
64.412 15.406 63.017 14.105 63.017 14.105 c
63.451 16.523 l
63.451 16.523 64.815 17.514 67.729 17.514 c
69.898 17.514 71.48 16.925 72.378 15.995 c
73.432 14.849 73.68 13.764 73.68 11.531 c
73.68 0.3418 l
72.503 0.3418 l
h
71.355 8.6797 m
71.355 8.6797 70.395 8.8662 69.217 8.8662 c
66.427 8.8662 64.443 7.998 64.04 6.2002 c
63.947 5.7969 63.947 5.5176 63.947 5.2695 c
63.947 3.0693 65.528 2.1084 67.45 2.1084 c
67.698 2.1084 68.318 2.1699 68.752 2.2939 c
70.146 2.7285 71.355 3.6582 71.355 5.0527 c
71.355 8.6797 l
f
n
88.063 0.3418 m
88.063 11.098 l
88.063 13.36 87.846 15.499 84.405 15.499 c
83.227 15.499 82.359 15.221 81.708 14.631 c
80.438 13.516 80.314 11.842 80.314 10.787 c
80.314 0.3418 l
77.988 0.3418 l
77.988 17.111 l
80.314 17.111 l
80.314 15.065 l
80.5 15.623 81.863 17.545 84.87 17.545 c
87.04 17.545 88.497 16.894 89.396 15.562 c
90.202 14.353 90.357 13.081 90.357 11.159 c
90.357 0.3418 l
88.063 0.3418 l
f
n
101.702 0.68262 m
101.702 0.68262 100.617 0.18653 99.47 0.18653 c
96.99 0.18653 95.688 1.9219 95.688 4.4326 c
95.688 15.189 l
93.177 15.189 l
93.611 17.111 l
95.75 17.111 l
95.936 20.676 l
98.044 21.048 l
98.044 17.111 l
101.702 17.111 l
101.268 15.189 l
98.075 15.189 l
98.075 4.2783 l
98.075 3.1006 98.881 2.3564 99.904 2.3564 c
100.896 2.3564 101.888 2.7588 101.888 2.7588 c
101.702 0.68262 l
f
n
110.38 0.12401 m
105.142 0.18653 103.313 3.4101 103.313 8.6182 c
103.313 13.236 105.11 17.514 110.38 17.483 c
115.867 17.452 117.2 13.205 117.2 8.6484 c
117.2 3.875 114.813 0.093719 110.38 0.12401 c
h
110.411 15.499 m
106.505 15.53 105.761 11.966 105.761 8.5244 c
105.761 4.2783 107.188 2.1396 110.411 2.1396 c
113.48 2.1396 114.72 5.084 114.72 8.5557 c
114.72 11.407 114.379 15.468 110.411 15.499 c
f
n
130.993 0.3418 m
130.993 11.098 l
130.993 13.36 130.776 15.499 127.336 15.499 c
126.158 15.499 125.29 15.221 124.639 14.631 c
123.368 13.516 123.244 11.842 123.244 10.787 c
123.244 0.3418 l
120.919 0.3418 l
120.919 17.111 l
123.244 17.111 l
123.244 15.065 l
123.43 15.623 124.794 17.545 127.801 17.545 c
129.971 17.545 131.427 16.894 132.326 15.562 c
133.132 14.353 133.287 13.081 133.287 11.159 c
133.287 0.3418 l
130.993 0.3418 l
f
n
156.845 0.3418 m
156.845 1.9531 l
155.482 0.65138 154.18 0.12401 152.506 0.12401 c
147.67 0.12401 145.965 4.0303 145.965 8.7109 c
145.965 11.47 146.926 17.483 152.537 17.483 c
155.76 17.483 156.721 15.716 156.721 15.716 c
156.721 23.218 l
159.015 23.218 l
159.015 0.3418 l
156.845 0.3418 l
h
156.721 11.377 m
156.721 12.462 156.473 13.577 155.76 14.353 c
155.109 15.065 154.087 15.499 152.753 15.499 c
148.693 15.499 148.538 10.694 148.569 8.6797 c
148.6 5.3935 149.53 2.2939 152.909 2.2939 c
153.684 2.2939 154.458 2.418 155.109 2.7588 c
156.102 3.2549 156.721 4.0918 156.721 4.0918 c
156.721 11.377 l
f
n
176.467 8.0596 m
165.556 8.0596 l
165.556 8.0596 165.524 7.9355 165.524 7.5947 c
165.524 6.6338 165.773 2.542 170.949 2.3867 c
174.514 2.2939 176.033 3.8437 176.033 3.8437 c
175.692 1.3955 l
175.661 1.3955 173.956 0.18653 170.856 0.18653 c
163.479 0.18653 162.952 6.1064 162.952 8.7109 c
162.952 11.47 163.758 17.514 169.926 17.545 c
176.126 17.607 176.498 11.035 176.498 8.959 c
176.498 8.5244 176.467 8.0596 176.467 8.0596 c
h
169.957 15.562 m
165.432 15.686 165.587 9.9814 165.587 9.9814 c
173.987 9.9814 l
173.987 9.9814 174.111 15.437 169.957 15.562 c
f
n
198.258 0.3418 m
195.065 0.3418 l
187.719 23.155 l
190.54 23.155 l
196.677 3.3174 l
202.939 23.155 l
205.573 23.155 l
198.258 0.3418 l
f
n
217.345 0.3418 m
216.788 0.3418 216.694 0.37209 216.478 0.55863 c
216.354 0.68262 216.26 0.89941 216.26 1.2402 c
216.26 2.3564 l
215.331 1.0547 213.874 0.031227 211.084 0.12401 c
206.899 0.24802 206.248 3.5654 206.248 5.084 c
206.248 5.7656 206.403 6.8818 207.116 7.9355 c
208.635 10.168 211.301 10.726 213.843 10.726 c
215.207 10.726 216.23 10.54 216.23 10.54 c
216.23 11.531 l
216.23 12.214 216.354 13.516 215.517 14.384 c
214.928 15.003 213.843 15.437 212.045 15.437 c
209.255 15.406 207.86 14.105 207.86 14.105 c
208.294 16.523 l
208.294 16.523 209.658 17.514 212.572 17.514 c
214.742 17.514 216.322 16.925 217.221 15.995 c
218.275 14.849 218.523 13.764 218.523 11.531 c
218.523 0.3418 l
217.345 0.3418 l
h
216.198 8.6797 m
216.198 8.6797 215.237 8.8662 214.06 8.8662 c
211.27 8.8662 209.286 7.998 208.883 6.2002 c
208.79 5.7969 208.79 5.5176 208.79 5.2695 c
208.79 3.0693 210.371 2.1084 212.293 2.1084 c
212.541 2.1084 213.161 2.1699 213.595 2.2939 c
214.99 2.7285 216.198 3.6582 216.198 5.0527 c
216.198 8.6797 l
f
n
233.897 0.3418 m
233.34 0.3418 233.278 0.37209 233.061 0.55863 c
232.906 0.68262 232.844 0.89941 232.844 1.2402 c
232.844 2.3564 l
231.945 1.1162 230.519 0.12401 228.07 0.12401 c
226.334 0.12401 225.218 0.49611 224.257 1.3955 c
223.048 2.542 222.738 4.123 222.738 6.293 c
222.738 17.111 l
225.064 17.111 l
225.064 6.3857 l
225.064 5.1152 224.97 4.0303 226.117 2.9453 c
226.582 2.4805 227.419 2.1396 228.504 2.1396 c
230.581 2.1396 232.782 3.4717 232.782 5.3633 c
232.782 17.111 l
235.107 17.111 l
235.107 0.3418 l
233.897 0.3418 l
f
n
249.737 0.3418 m
249.737 1.9531 l
248.373 0.65138 247.071 0.12401 245.397 0.12401 c
240.562 0.12401 238.857 4.0303 238.857 8.7109 c
238.857 11.47 239.818 17.483 245.428 17.483 c
248.652 17.483 249.613 15.716 249.613 15.716 c
249.613 23.218 l
251.907 23.218 l
251.907 0.3418 l
249.737 0.3418 l
h
249.613 11.377 m
249.613 12.462 249.365 13.577 248.652 14.353 c
248.002 15.065 246.979 15.499 245.646 15.499 c
241.585 15.499 241.43 10.694 241.461 8.6797 c
241.492 5.3935 242.422 2.2939 245.8 2.2939 c
246.575 2.2939 247.35 2.418 248.002 2.7588 c
248.993 3.2549 249.613 4.0918 249.613 4.0918 c
249.613 11.377 l
f
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
