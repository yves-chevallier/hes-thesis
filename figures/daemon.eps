%!PS-Adobe-3.0 EPSF-3.0
%%Title: (daemon.eps)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 19:18:31 12/21/05
%%For: (Canard)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 583 368
%%HiResBoundingBox: 0.0 0.0 583.392 368.192
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: file Pscript_CFF PSVER
userdict /ct_CffDict 6 dict put     
ct_CffDict begin                    
/F0Subr     
{
    systemdict /internaldict known 
   {
      1183615869 systemdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } 
   {
      userdict /internaldict known not 
        { 
          userdict /internaldict 
          {
               count 0 eq 
             {/internaldict errordict /invalidaccess get exec} if 
             dup type /integertype ne 
             {/internaldict errordict /invalidaccess get exec} if 
             dup 1183615869 eq
             {pop 0} 
             {/internaldict errordict /invalidaccess get exec} 
             ifelse 
          } 
          dup 14 get 1 25 dict put 
          bind executeonly put 
       } if 
       1183615869 userdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } ifelse
    [ 
       systemdict /internaldict known not 
       { 100 dict /begin cvx /mtx matrix /def cvx } if 
       systemdict /currentpacking known {currentpacking true setpacking} if 
       { 
          systemdict /internaldict known { 
          1183615869 systemdict /internaldict get exec 
          dup /$FlxDict known not { 
          dup dup length exch maxlength eq 
          { pop userdict dup /$FlxDict known not
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } if } 
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } 
          ifelse 
          } if /$FlxDict get begin } if 
          grestore 
          /exdef {exch def} def 
          /dmin exch abs 100 div def 
          /epX exdef /epY exdef 
          /c4y2 exdef /c4x2 exdef /c4y1 exdef /c4x1 exdef /c4y0 exdef /c4x0 exdef 
          /c3y2 exdef /c3x2 exdef /c3y1 exdef /c3x1 exdef /c3y0 exdef /c3x0 exdef 
          /c1y2 exdef /c1x2 exdef /c2x2 c4x2 def /c2y2 c4y2 def 
          /yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def 
          /PickCoords {  
          {c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2} 
          {c3x0 c3y0 c3x1 c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2} 
          ifelse 
          /y5 exdef /x5 exdef /y4 exdef /x4 exdef /y3 exdef /x3 exdef 
          /y2 exdef /x2 exdef /y1 exdef /x1 exdef /y0 exdef /x0 exdef 
          } def 
          mtx currentmatrix pop  
          mtx 0 get abs .00001 lt mtx 3 get abs .00001 lt or 
          {/flipXY -1 def} 
          {mtx 1 get abs .00001 lt mtx 2 get abs .00001 lt or 
          {/flipXY 1 def} 
          {/flipXY 0 def} 
          ifelse } 
          ifelse 
          /erosion 1 def 
          systemdict /internaldict known { 
           1183615869 systemdict /internaldict get exec dup  
          /erosion known 
          {/erosion get /erosion exch def} 
          {pop} 
          ifelse 
          } if 
          yflag 
          {
              flipXY 0 eq c3y2 c4y2 eq or 
             {false PickCoords}
             {
                  /shrink c3y2 c4y2 eq 
                {0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs} ifelse def 
                /yshrink {c4y2 sub shrink mul c4y2 add} def 
                /c1y0 c3y0 yshrink def /c1y1 c3y1 yshrink def 
                /c2y0 c4y0 yshrink def /c2y1 c4y1 yshrink def 
                /c1x0 c3x0 def /c1x1 c3x1 def /c2x0 c4x0 def /c2x1 c4x1 def 
                /dY 0 c3y2 c1y2 sub round 
                dtransform flipXY 1 eq {exch} if pop abs def 
                dY dmin lt PickCoords 
                y2 c1y2 sub abs 0.001 gt {
                   c1x2 c1y2 transform flipXY 1 eq {exch} if  
                   /cx exch def /cy exch def 
                   /dY 0 y2 c1y2 sub round dtransform flipXY 1 eq {exch} 
                   if pop def 
                   dY round dup 0 ne 
                   {/dY exdef } 
                   {pop dY 0 lt {-1}{1} ifelse /dY exdef} 
                   ifelse 
                   /erode PaintType 2 ne erosion 0.5 ge and def  
                   erode {/cy cy 0.5 sub def} if 
                   /ey cy dY add def   
                   /ey ey ceiling ey sub ey floor add def   
                   erode {/ey ey 0.5 add def} if   
                   ey cx flipXY 1 eq {exch} if itransform exch pop  
                   y2 sub /eShift exch def  
                   /y1 y1 eShift add def /y2 y2 eShift add def /y3 y3  
                   eShift add def  
                } if  
             } ifelse  
          } 
          {
              flipXY 0 eq c3x2 c4x2 eq or  
             {false PickCoords }  
             { /shrink c3x2 c4x2 eq  
                {0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs} ifelse def  
                /xshrink {c4x2 sub shrink mul c4x2 add} def  
                /c1x0 c3x0 xshrink def /c1x1 c3x1 xshrink def  
                /c2x0 c4x0 xshrink def /c2x1 c4x1 xshrink def  
                /c1y0 c3y0 def /c1y1 c3y1 def /c2y0 c4y0 def /c2y1 c4y1 def  
                /dX c3x2 c1x2 sub round 0 dtransform  
                flipXY -1 eq {exch} if pop abs def 
                dX dmin lt PickCoords  
                x2 c1x2 sub abs 0.001 gt {  
                   c1x2 c1y2 transform flipXY -1 eq {exch} if  
                   /cy exch def /cx exch def   
                   /dX x2 c1x2 sub round 0 dtransform flipXY -1 eq {exch} if pop def  
                   dX round dup 0 ne  
                   {/dX exdef}  
                   {pop dX 0 lt {-1}{1} ifelse /dX exdef}  
                   ifelse  
                   /erode PaintType 2 ne erosion .5 ge and def 
                   erode {/cx cx .5 sub def} if  
                   /ex cx dX add def  
                   /ex ex ceiling ex sub ex floor add def  
                   erode {/ex ex .5 add def} if  
                   ex cy flipXY -1 eq {exch} if itransform pop  
                   x2 sub /eShift exch def  
                   /x1 x1 eShift add def /x2 x2 eShift add def /x3 x3 eShift add def  
                } if  
             } ifelse  
          } ifelse 
          x2 x5 eq y2 y5 eq or  
          {x5 y5 lineto }  
          {x0 y0 x1 y1 x2 y2 curveto  
          x3 y3 x4 y4 x5 y5 curveto}  
          ifelse  
          epY epX   
       }  
       systemdict /currentpacking known {exch setpacking} if   
       /exec cvx /end cvx 
    ] cvx  
    executeonly 
    exch  
    {pop true exch restore}   
    {   
       systemdict /internaldict known not  
       {1183615869 userdict /internaldict get exec  
       exch /FlxProc exch put true}  
       {1183615869 systemdict /internaldict get exec  
       dup length exch maxlength eq  
       {false}   
       {1183615869 systemdict /internaldict get exec 
       exch /FlxProc exch put true}  
       ifelse}  
       ifelse
    } ifelse  
    {
       systemdict /internaldict known  
       {1183615869 systemdict /internaldict get exec /FlxProc get exec}  
       {1183615869 userdict /internaldict get exec /FlxProc get exec}  
       ifelse   
    } if  
} executeonly def
/F1Subr
{gsave currentpoint newpath moveto} bind def 
/F2Subr
{currentpoint grestore gsave currentpoint newpath moveto} bind  def
/HSSubr 
{
   systemdict /internaldict known not
   {pop 3}
   {1183615869 systemdict /internaldict get exec
    dup /startlock known
    {/startlock get exec}
    {dup /strtlck known
    {/strtlck get exec}
    {pop 3}
    ifelse}
    ifelse}
    ifelse
} bind def
end                                 
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 17489 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-701">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2005-12-21T19:18:31+01:00</xap:CreateDate>
         <xap:ModifyDate>2005-12-21T19:18:31+01:00</xap:ModifyDate>
         <xap:MetadataDate>2005-12-21T19:18:31+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>164</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9AeVfKvlh/LGju+j2TO1&#xA;lbFmNtESSYlJJJXFU0/wn5V/6s1j/wBI0P8AzTirv8J+Vf8AqzWP/SND/wA04q7/AAn5V/6s1j/0&#xA;jQ/804qhr3y55cgMCw6Dp8rzyenR4YkAARnrURv/ACU6YlVP/DWlf9S7pX/Ap/2T4LTTv8NaV/1L&#xA;ulf8Cn/ZPja07/DWlf8AUu6V/wACn/ZPja07/DWlf9S7pX/Ap/2T42tO/wANaV/1Lulf8Cn/AGT4&#xA;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&#xA;8vh48etcVf/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:5EACF6704572DA11AE5B868CC1F4A33C</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5EACF6704572DA11AE5B868CC1F4A33C</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4096e2aa-187d-4049-80ab-22f7e3cefdf9</stRef:instanceID>
            <stRef:documentID>uuid:3B47B3973D72DA1190E0B3EFEBFBB1BC</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">daemon.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Canard</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 583.392 368.192 rectclip
/N11 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

q
0.0 0.0 m
583.392 0.0 l
583.392 368.192 l
0.0 368.192 l
h
W
n
n
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E14 exch /ColorSpace defineRes

cs 1.0 1.0 1.0 sc
0.495610 0.495970 582.400024 367.200012 rectfill

q
n
0.0 368.192 583.392 -368.132 re
W
n
0.991 w
4.0 M
true setSA
n
0.49561 367.696 m
0.49561 367.696 582.4 -367.2 re
0.003922 0.007843 0.007843 sc
S
Q
true setSA
n
1.0 0.98039 0.96471 sc
84.811996 13.153000 382.822998 344.942993 rectfill

0.717 w
4.0 M
n
84.812 358.096 m
84.812 358.096 382.823 -344.943 re
0.003922 0.007843 0.007843 sc
S
n
0.93725 0.97255 0.98039 sc
108.482002 207.102997 153.675018 137.753998 rectfill

0.486 w
n
108.482 207.103 m
108.482 207.103 153.675 137.754 re
0.003922 0.007843 0.007843 sc
S
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman Initial
ct_CffDict begin
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /PEVBAA+Myriad-Roman def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def
/Weight (Regular) def
/ItalicAngle 0 def
/BaseFontName (Myriad-Roman) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {-46 -250 1126 831} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 0 674 685 484 496 650 661 710 721] def
/OtherBlues [261 266 -200 -194 -221 -212] def
/BlueScale 0.0604583 def
/BlueShift 7.1 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67 73] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs [{ct_CffDict/F0Subr get exec} {ct_CffDict/F1Subr get exec}
{ct_CffDict/F2Subr get exec} {ct_CffDict/HSSubr get exec}] def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B896187A> |-
end put
end
dup /FontName get exch definefont pop
end
end
%ADOEndSubsetFont
[/N10/PEVBAA+Myriad-Roman 1 TZ
179.539 277.77 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B74383E5F6C6CDF9C5C9B986319F48E0C8F60D9DD3B951CB8A
90C91D93DE> |-
/I <1C60D8A8C9B87DE005AD6F3C5D74814B2BFE06F81F462471EDB11E0EC39F
39EA> |-
/B <1C60D8A8C9B79D2DDA73CBA562CCA616611FA2F6D9A4F73A34564160886E
9CF893B5F30C6CA3CC5C829E6C86CCDF1B4F039933012B622744E19C9622C9A0
EDFD79C01774878F95329146747F49AE0B619F289D043714380915791A39EAF1
C55FAA6E8B0193D3A75CA38F014EE4A76200422AF52FE0B9914156E294C76766
CE3240B556A4C91860BA5F52645A4CE385CD5523EA2EA36662DB6518F37EBD1D
996F12928EF34E0A04AA450D0974D74C27> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 76 /L put
dup 73 /I put
dup 66 /B put
pop
end
%ADOEndSubsetFont
/N10 7.8918 Tf
(LIB)
[3.72493 1.88613 4.27741 ] pdfxs
166.309 268.299 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B624F9257693AA048B36DAD1746A21003321A85C5F6E80CF60
CB723A5CC5A54CF184D3FEE11F6EF76B25CBA2401CF46405EBA469AF87B00D57
51B379836707222B05CF252001B70774E3269C710D3AAEA9F64EAD29E5FC90C0
1037E0F499A4> |-
/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD8
33E1AD6BC7D55692C9AE2F77E568D5881F8457D1A44289B0DB31B4E1DC1F3487
A85D6C086A5A13FB7D7B66A3F61FC6144BE5FC2AC4531DAC75D1CF7F22D28306
8030CE48CB30B08E492B787031193B71DF10864EAAAD679E25079DE309> |-
/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB5
3E56E1831B0550D2FE4055F5> |-
/U <1C60D8A8C9B67A40D81BFBD664698F172962E5E1FA1185B63F3290B3666C
22108B29923B1DC2E04A6BB03297D059A20638E9439889AA598516C5989124B6
5198F3D60A7398> |-
/C <1C60D8A8C9B7F7BFE242671C9E817400744FCB1930C8B6D982C0603B0F56
B2079EC8B4534AB9C74A497574D9EF71E8F51BC95048F6DF2B869D41C666FAC1
85E86887C1BFBF06008B88E70E2905C7696BAD3BCAD29844AD> |-
/H <1C60D8A8C9B6415B1C8023DCDB0FF1D084A484AF3579A723AF8D5247ABB5
D292AC378AF267DE95E8DC7174E8DD00326C723C8D6F70CCD88C857300A53452> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 79 /O put
dup 78 /N put
dup 84 /T put
dup 85 /U put
dup 67 /C put
dup 72 /H put
pop
end
%ADOEndSubsetFont
(LONTOUCH)
[3.41715 5.43741 5.19205 3.7091 5.43662 5.10523 4.57647 5.14461 ] pdfxs
n
0.93333 0.96471 0.98824 sc
308.653015 56.773998 153.674011 137.753006 rectfill

n
308.653 56.774 m
308.653 56.774 153.674 137.753 re
0.003922 0.007843 0.007843 sc
S
n
0.84314 0.91373 0.97255 sc
426.135986 70.149002 36.191010 47.862999 rectfill

n
462.327 70.149 m
462.327 70.149 -36.191 47.863 re
0.003922 0.007843 0.007843 sc
S
n
0.84314 0.91373 0.97255 sc
426.135986 135.578995 36.191010 47.862991 rectfill

n
462.327 135.579 m
462.327 135.579 -36.191 47.863 re
0.003922 0.007843 0.007843 sc
S
432.899 162.103 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC9666D445523C20D6BC6D
45C854A0BE693CA04DDB35CD63DEE609DA99BE5BB9BDB7651D8BF1CA5EA29F7E
FB65104E204234EA7868475D9878D05352A01BEB28BBDCB8142D807864E70A03
C78CC32A447952CB6F5903240924C227> |-
/o <1C60D8A8C9B7967683396363C51B2F1979461F3B52B4DE9D5B25D8A855AB
1B46FE9631B4DCEE52CD84AA08F1094EFB92ECAE28B9F270EC36D74BB1583561
930BC929FA93A4970736610867F1192023A3BA25> |-
/c <1C60D8A8C9B77BBBDD6F2DE369649C6BDF153C7C962741EEC90DDB1DF1E9
782FBDC93F3133FEDE0DEC710BC71E765B57617A4C3A6F6003E2DAC43D98394F
553F1D2B070FD11AFA487D9BDD28EA7E541892AA> |-
/k <1C60D8A8C9B746F4FCFA28E242EA979943B301877122189B94B774678775
958F6CF4E2E0F5522F7B9585C8B0EB49A5C92E5202C6C38EBD05157E4CDB979B
55A080B47AA80D3B2CE4ECE0C7> |-
/e <1C60D8A8C9B7A66F84858C3680112C82D73E1C597325682C9ED530BCC0B6
51B28ABA219143BA4989A6F804DAAF308E4096EA3C5EE4CE5A25A89A84AEDFB4
7D9498707E4187C5FE017863CAF507AFEA82E084A8EFA129F39779B15FDFF321
33732565D375FCDD8EE0A32F5A98049423277E1BD8> |-
/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA029E018F1B853B19499
2023A1A2094A61AA6AC40B7390D1BCF785D2429D0AF32EA1E2BF602E38DE50F9
0EE120A01A6478CC20B62FEDE17CBADD3C1BB7C9E4FE75CF0D3DFB8214AF8D64
2DB00A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 83 /S put
dup 111 /o put
dup 99 /c put
dup 107 /k put
dup 101 /e put
dup 116 /t put
pop
end
%ADOEndSubsetFont
(Socket)
[3.90641 4.34835 3.55129 3.71699 3.96963 2.62792 ] pdfxs
436.679 152.633 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B64FADC8BE4593403BE5D424DEB8DFFAE06BF72BBBE59144ED
4D0D76A92E2A49E01C3250FA16D36E8432D1D43D5E2102AD433DB45A0071881F
56B96D80899632681F5387E21E3857808D19596B03B665F61B98CDE5985F3C9D
9C49CC8D985A3DCCA9E35E03A97C34> |-
/P <1C60D8A8C9B7876E235FC614E63EC6DDBF5153E7285DD594B5771A70D6E9
7953F1D144059ED4A1FA2C4F4204702266669F1E78B62CE162B9A2B10D3019FC
319ACEE020094E9A769A2DCEC609C707A853CF960348961D0E687AE78FBE3DC5
B55501546D1534FA2BBDBB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 68 /D put
dup 80 /P put
pop
end
%ADOEndSubsetFont
(UDP)
[5.10602 5.25594 4.19842 ] pdfxs
432.899 95.5246 m
(Socket)
[3.90641 4.34835 3.55129 3.71699 3.96963 2.62792 ] pdfxs
437.717 86.0545 m
(TCP)
[3.7091 4.57726 3.98534 ] pdfxs
n
465.245 159.92 m
489.405 159.92 l
1.0 1.0 1.0 sc
f
n
465.245 159.92 m
489.405 159.92 l
0.003922 0.007843 0.007843 sc
S
n
492.34 159.92 m
490.958 159.406 489.245 158.532 488.183 157.607 c
489.019 159.92 l
488.183 162.232 l
489.245 161.307 490.958 160.432 492.34 159.92 c
f
n
462.309 159.92 m
463.69 160.432 465.404 161.307 466.466 162.232 c
465.629 159.92 l
466.466 157.607 l
465.404 158.532 463.69 159.407 462.309 159.92 c
f
n
465.245 94.489 m
489.405 94.489 l
1.0 1.0 1.0 sc
f
n
465.245 94.489 m
489.405 94.489 l
0.003922 0.007843 0.007843 sc
S
n
492.34 94.489 m
490.958 93.976 489.245 93.102 488.183 92.176 c
489.019 94.489 l
488.183 96.802 l
489.245 95.877 490.958 95.002 492.34 94.489 c
f
n
462.309 94.489 m
463.69 95.002 465.404 95.877 466.466 96.802 c
465.629 94.489 l
466.466 92.176 l
465.404 93.102 463.69 93.977 462.309 94.489 c
f
373.139 123.797 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B896187A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 32 /space put
pop
end
%ADOEndSubsetFont
(LIB LTP)
[3.72493 1.88613 4.27741 1.67311 3.01467 3.92218 4.19842 ] pdfxs
470.54 166.398 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B7AFA9BC4F00998616708AD319D689B216B721CBB286284877
352BA785E1B053DF2EC2B77B2A321D6047CBD4FD467F6DD70A1B400CD3EB> |-
/h <1C60D8A8C9B790A816BA887E1EEB5E8F3559B4B8B5AF3C1F8CE7A16D3E22
CB112738E5F8A1CE5D26279FE5776EB4D209C6776FEB4AAA38429BF6C85B2871
ED715FE9B1E6017B480AA654530D060116FB2F0456C03BE42E66E7> |-
/r <1C60D8A8C9B825FA276057E42F8B6B57C9D83BDDD098E1F2815023B08CE6
DB69AE017A2B457327A0071129EDB590BE7AA3607E0922708891597C3D8F669F
3ED32EED759BFAF13F7F4F0E8EBB695840553EB7F2B5DF808E6281337961393B
D02988D264043D0826E651AB7250C84536DC39AF> |-
/n <1C60D8A8C9B790A816BA887E1FDE7CD82D372FF5366DAE5DCB8586A90B38
B997881AE3967F459F4112E189F13732C7688D71582E7A9ED9DDE11A26AE52A0
AA137F8A21AF613F6AFFF512A754B0550B0B3C16BE3A435E248CF28FD678E415
358EE253E19230> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 69 /E put
dup 104 /h put
dup 114 /r put
dup 110 /n put
pop
end
%ADOEndSubsetFont
/N10 8.6092 Tf
(Ethernet)
[4.22457 2.8384 4.76685 4.31413 2.84961 4.77632 4.31413 2.8384 ] pdfxs
470.54 100.394 m
(Ethernet)
[4.22457 2.8384 4.76685 4.31413 2.84961 4.77632 4.31413 2.8384 ] pdfxs
n
0.94902 0.93725 0.96863 sc
308.653015 207.102997 153.674011 137.753998 rectfill

n
308.653 207.103 m
308.653 207.103 153.674 137.754 re
0.003922 0.007843 0.007843 sc
S
n
0.91373 0.89804 0.94902 sc
364.194000 226.274994 98.132996 113.134003 rectfill

n
364.194 226.275 m
364.194 226.275 98.133 113.134 re
0.003922 0.007843 0.007843 sc
S
n
0.81569 0.78039 0.8902 sc
426.135986 276.544006 36.191010 47.864014 rectfill

n
462.327 276.544 m
462.327 276.544 -36.191 47.864 re
0.003922 0.007843 0.007843 sc
S
440.213 298.764 m
/N10 7.8918 Tf
(LDI)
[3.72493 5.25594 1.88613 ] pdfxs
n
465.245 300.885 m
489.405 300.885 l
1.0 1.0 1.0 sc
f
n
465.245 300.885 m
489.405 300.885 l
0.003922 0.007843 0.007843 sc
S
n
492.34 300.885 m
490.958 300.372 489.245 299.498 488.183 298.572 c
489.019 300.885 l
488.183 303.197 l
489.245 302.272 490.958 301.397 492.34 300.885 c
f
n
462.309 300.885 m
463.69 301.398 465.404 302.272 466.466 303.197 c
465.629 300.885 l
466.466 298.572 l
465.404 299.498 463.69 300.373 462.309 300.885 c
f
385.789 282.207 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R <1C60D8A8C9B7818197CA8C10BDEF0792283B4AD60A4778EF56CD14734468
97A14587B239CC7236935A0C026A6381E9B79ABCED87A8EBB1D5AFD473480E26
645BAFFD01790195167107537B4D5E1C490BD01257730F3FC2EAC4A06E6D2047
5F6A1920DC3E913DD654259560530D0C915BDA7946AB07618F2A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 82 /R put
pop
end
%ADOEndSubsetFont
(ORION)
[5.43741 4.24574 1.88613 5.43741 5.19284 ] pdfxs
325.789 275.606 m
(LIB LON)
[3.72493 1.88613 4.27741 1.67311 3.41636 5.43741 5.19284 ] pdfxs
468.275 307.589 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/W <1C60D8A8C9B683825E2D044740A889FBE934ECCE78E1156C56B6149D738C
A6C7B4AECC7FA154428E6DD465A34829655A052CE847BECFCE4935759CA3320C
B32E768FC6EFBCB2CBB05BF832AD060AE96C466D588BBBE9E07664F888374FAD
D9DAFA1F6B67B0D2A0D84DC25A0F90A7A94B1AFFA65681694BA26D98422B5328
1178301F93B4E51ACA6C6CB21195> |-
/s <1C60D8A8C9B70FAD6F31E6985044CC86CE58E7103CFADE13C7DC457B6B61
B27C387A81A626F4966C688D0C50600476E9AB18467FFAC6ED3909C5C2017A12
2463840FBE6795A1A2CAC9FEB45127B788B0426CC0AA67A9509F68032EDFEB1A
EA4184EB9837640B2C28468625> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 87 /W put
dup 115 /s put
pop
end
%ADOEndSubsetFont
/N10 8.6092 Tf
(LonWorks)
[3.94388 4.73072 4.78235 6.98286 4.73072 2.81948 4.04197 3.41351 ] pdfxs
n
64.724 162.055 m
105.675 162.055 l
1.0 1.0 1.0 sc
f
0.633 w
n
64.724 162.055 m
105.675 162.055 l
0.003922 0.007843 0.007843 sc
S
n
108.611 162.055 m
107.229 161.542 105.516 160.668 104.453 159.742 c
105.29 162.055 l
104.453 164.368 l
105.516 163.442 107.229 162.567 108.611 162.055 c
f
n
61.404 162.055 m
62.785 162.567 64.498 163.442 65.561 164.368 c
64.724 162.055 l
65.561 159.742 l
64.498 160.668 62.785 161.543 61.404 162.055 c
f
n
1.0 0.95294 0.88235 sc
108.783997 57.938999 69.576996 62.369999 rectfill

0.22 w
n
108.784 57.939 m
108.784 57.939 69.577 62.37 re
0.003922 0.007843 0.007843 sc
S
137.792 90.913 m
/N10 7.8918 Tf
(LIB)
[3.72493 1.88613 4.27741 ] pdfxs
133.428 81.4421 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B7EDAFD30F79AA728C73B6F9D7243B3F3111E28F2A88FF9E55
31C99B386BBCEA887616E38278755F3D624761739CBCFEBE737FE4F5859C10B4
BE5F104A9AEB342180A78D72C5F4> |-
/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E9CFE2CD6B50437205F942
FF37E122B69D17C7AA691A603207160811AFB791> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 86 /V put
dup 70 /F put
pop
end
%ADOEndSubsetFont
(VTFTP)
[4.40361 3.92218 3.8433 3.92218 4.19842 ] pdfxs
n
0.97647 0.89804 0.94118 sc
108.783997 129.682999 69.576996 62.369003 rectfill

n
108.784 129.683 m
108.784 129.683 69.577 62.369 re
0.003922 0.007843 0.007843 sc
S
137.792 162.656 m
(LIB)
[3.72493 1.88613 4.27741 ] pdfxs
132.532 153.186 m
(ERROR)
[3.88754 4.25048 4.25048 5.44215 4.25048 ] pdfxs
n
0.99216 0.98431 0.89412 sc
192.580002 56.773998 69.577011 62.368999 rectfill

n
192.58 56.774 m
192.58 56.774 69.577 62.369 re
0.003922 0.007843 0.007843 sc
S
0.717 w
n
274.79 279.465 m
300.616 279.465 l
S
n
304.946 279.465 m
302.909 278.71 300.381 277.419 298.814 276.054 c
300.047 279.465 l
298.814 282.877 l
300.381 281.511 302.909 280.221 304.946 279.465 c
f
n
270.459 279.465 m
272.497 280.221 275.025 281.511 276.591 282.877 c
275.358 279.465 l
276.591 276.054 l
275.025 277.419 272.497 278.71 270.459 279.465 c
f
n
274.79 88.915 m
300.616 88.915 l
S
n
304.946 88.915 m
302.909 88.159 300.381 86.869 298.814 85.504 c
300.047 88.915 l
298.814 92.326 l
300.381 90.961 302.909 89.671 304.946 88.915 c
f
n
270.459 88.915 m
272.497 89.671 275.025 90.961 276.591 92.326 c
275.358 88.915 l
276.591 85.504 l
275.025 86.869 272.497 88.16 270.459 88.915 c
f
n
302.338 170.415 m
242.648 170.415 l
242.648 198.539 l
S
n
242.648 202.869 m
243.404 200.832 244.694 198.304 246.059 196.737 c
242.648 197.971 l
239.237 196.737 l
240.602 198.304 241.892 200.832 242.648 202.869 c
f
n
306.668 170.415 m
304.631 169.659 302.103 168.369 300.537 167.004 c
301.77 170.415 l
300.537 173.826 l
302.103 172.461 304.631 171.171 306.668 170.415 c
f
n
142.781 46.443 m
142.781 26.355 l
383.839 26.355 l
383.839 46.443 l
S
n
383.839 50.773 m
384.595 48.735 385.885 46.207 387.25 44.641 c
383.839 45.875 l
380.428 44.641 l
381.793 46.207 383.084 48.735 383.839 50.773 c
f
n
142.781 50.773 m
143.537 48.735 144.827 46.207 146.192 44.641 c
142.781 45.875 l
139.37 44.641 l
140.735 46.207 142.025 48.735 142.781 50.773 c
f
n
163.443 46.443 m
163.443 34.391 l
227.369 34.391 l
227.369 46.443 l
S
n
227.369 50.773 m
228.125 48.735 229.415 46.207 230.78 44.641 c
227.369 45.875 l
223.958 44.641 l
225.323 46.207 226.613 48.735 227.369 50.773 c
f
n
163.443 50.773 m
164.199 48.735 165.489 46.207 166.854 44.641 c
163.443 45.875 l
160.032 44.641 l
161.397 46.207 162.688 48.735 163.443 50.773 c
f
n
191.567 138.848 m
300.043 138.848 l
S
n
304.373 138.848 m
302.335 138.092 299.807 136.802 298.241 135.437 c
299.475 138.848 l
298.241 142.259 l
299.807 140.894 302.335 139.604 304.373 138.848 c
f
n
187.237 138.848 m
189.274 139.604 191.802 140.894 193.369 142.26 c
192.135 138.848 l
193.369 135.437 l
191.802 136.802 189.274 138.093 187.237 138.848 c
f
n
191.567 170.415 m
211.081 170.415 l
211.081 198.539 l
S
n
211.081 202.869 m
211.837 200.832 213.127 198.304 214.492 196.737 c
211.081 197.971 l
207.67 196.737 l
209.035 198.304 210.325 200.832 211.081 202.869 c
f
n
187.237 170.415 m
189.274 171.171 191.802 172.461 193.369 173.826 c
192.135 170.415 l
193.369 167.004 l
191.802 168.369 189.274 169.659 187.237 170.415 c
f
n
103.179 86.046 m
91.126 86.046 l
91.126 141.144 l
103.179 141.144 l
S
n
107.508 141.144 m
105.471 140.388 102.943 139.098 101.377 137.733 c
102.61 141.144 l
101.377 144.555 l
102.943 143.19 105.471 141.9 107.508 141.144 c
f
n
107.508 86.046 m
105.471 85.29 102.943 84.0 101.377 82.634 c
102.61 86.046 l
101.377 89.457 l
102.943 88.091 105.471 86.801 107.508 86.046 c
f
n
274.79 164.765 m
278.276 164.765 281.103 167.591 281.103 171.078 c
281.103 174.566 278.276 177.392 274.79 177.392 c
274.79 153.771 m
191.567 153.771 l
S
n
187.237 153.771 m
189.274 154.527 191.802 155.817 193.369 157.183 c
192.135 153.771 l
193.369 150.36 l
191.802 151.725 189.274 153.016 187.237 153.771 c
f
n
274.79 164.765 m
274.79 153.771 l
274.79 177.392 m
274.79 238.715 l
274.79 238.715 m
302.913 238.715 l
S
n
307.243 238.715 m
305.206 237.96 302.678 236.67 301.111 235.304 c
302.344 238.715 l
301.111 242.127 l
302.678 240.761 305.206 239.471 307.243 238.715 c
f
221.587 89.748 m
(LIB)
[3.72493 1.88613 4.27741 ] pdfxs
211.569 80.2771 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B7D7E88499B0B4629F6222BB16137C7CA06A8AAC2774EF9B30
40901B1145499CB67E1F0E06E97898E1BF6CD1BDA4F8FEE98737DFEB0DA4329D
BC2B10502C72149324E886ACDA48658FC881BBAE> |-
/X <1C60D8A8C9B7E02AFD7F1EBE5CC834AB58337882CD546FA2822B617194C3
C3B0F00657930754EB597831AE300036B9ECAA70E9A5E27F1ADC357E3511839A
32420F7ECDC0EBCC00D8B40AC5E5D25931717059DB677A811B684E4FC739624A
1EDBE429> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 65 /A put
dup 88 /X put
pop
end
%ADOEndSubsetFont
(DATABOX)
[5.25594 4.20633 3.3295 4.82978 4.27741 5.19277 4.50621 ] pdfxs
51.0864 150.74 m
%ADOBeginSubsetFont: PEVBAA+Myriad-Roman AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
systemdict begin
/PEVBAA+Myriad-Roman findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7445143C91D571912353B3D6453C7800F6BDE4218CEB4CA25
78B8BA6273B26B8AB7E034D8D8BE198913BB60A2D4DC3D0C27224D99CA711687
0F50927D796933CF90EDA49C024C5E64786256C66964AE4DE6ECCB8A940D99F9
8860AC106AD82647646CBFAFCB4F> |-
/l <1C60D8A8C9B88055FF27B3923C5344CB60EC167D30E66A163A5CE58557> |-
/g <1C60D8A8C9B7ECD94DE1A189191AD5F29E71326BFA4D4D412047E3277675
0DDBFB4B53D1D72CDE8C545BF03E4EA2D14ABBB97F7F8A645D1D3F3489C958CE
A0678D07AAB04EB9684E42BC2E838442654990758C06B4D2E0BFF1F9FA6DF30D
4D41D589956EB1075E6781B91347B7650C23594D4A6826980A08D885E2AC9258
11EC824E080597D981C7E827E41106E60C554C6F930B0893E721BF0E4B2B8600
9695CEA38C38005F0694E5307908AFC08742AFD3E24E9B90E6A5557848F938C4
5D089C8461F583639667EA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/PEVBAA+Myriad-Roman findfont /Encoding get
dup 121 /y put
dup 108 /l put
dup 103 /g put
pop
end
%ADOEndSubsetFont
/N10 8.6092 Tf
(Syslog)
[4.19265 4.00322 3.40835 2.0145 4.73503 4.76094 ] pdfxs
Q
/PEVBAA+Myriad-Roman /Font _pdfUndefineResource
/N10 /Font _pdfUndefineResource
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
